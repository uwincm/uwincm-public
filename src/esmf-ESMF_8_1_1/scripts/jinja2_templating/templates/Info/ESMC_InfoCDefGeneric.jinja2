{#Data type iteration target#}
{% set ts = meta['THETYPES'].values() %}
{#Interfaces overloaded for for scalar and arrays (lists)#}
{% set is_scalar = [True, False] %}
{{ meta['ESMC_FILEHEADER'] }}

#define ESMC_FILENAME "ESMC_InfoCDefGeneric.C"

{{ meta['C_JINJADISCLAIMER'] }}

// Info C-Fortran method implementation (body) file

// single blank line to make protex happy.
//BOPI

//EOPI
//-----------------------------------------------------------------------------
//
// !DESCRIPTION:
//
//-----------------------------------------------------------------------------

#include "ESMC.h"
#include "ESMCI_Base.h"
#include "ESMCI_Macros.h"
#include "ESMCI_Info.h"
#include "ESMCI_LogErr.h"
#include "ESMCI_Util.h"
#include "ESMCI_VM.h"
#include "json.hpp"

#include <iostream>
#include <vector>

using json = nlohmann::json;

//-----------------------------------------------------------------------------
 // leave the following line as-is; it will insert the cvs ident string
 // into the object file for tracking purposes.
 static const char *const version = "$Id$";
//-----------------------------------------------------------------------------

extern "C" {

//-----------------------------------------------------------------------------
// InfoGet --------------------------------------------------------------------
//-----------------------------------------------------------------------------

{% for is_scalar in [True, False] %}{% for t in ts %}{% if t.ctype != "std::string" %}
{% set method_name = "ESMC_InfoGet" %}
{% if not is_scalar %}
{% set method_name = method_name~"Array" %}
{% endif %}
{% set method_name = method_name~t.esmf_suffix %}
#undef  ESMC_METHOD
#define ESMC_METHOD "{{ method_name }}()"
void {{ method_name }}(ESMCI::Info *info, char *key, {{ t.ctype }} {% if is_scalar %}&{% else %}*{% endif %}value, {% if not is_scalar %}int &count, {% endif %}int &esmc_rc, {% if is_scalar %}{{ t.ctype }} *def, int *index, {% endif %}int &fortran_bool_recursive{% if not is_scalar %}, bool &fortran_bool_scalarToArray, int &expected_size{% endif %}) {
  ESMC_CHECK_INIT(info, esmc_rc)
  esmc_rc = ESMF_FAILURE;
  try {
    std::string local_key(key);
    bool recursive = fortran_bool_recursive == 1;
{% if is_scalar %}
    value = info->get<{{ t.ctype }}>(local_key, def, index, recursive, nullptr, false);
{% else %}
    bool scalar_to_array = fortran_bool_scalarToArray == 1;
    const json *j = info->getPointer(local_key, recursive);
    bool is_array = j->is_array();
    if (!is_array && !scalar_to_array) {
      std::string msg = "Array requested but type in JSON storage is not an array. Key is: " + local_key;
      ESMC_CHECK_RC("ESMF_RC_ATTR_WRONGTYPE", ESMF_RC_ATTR_WRONGTYPE, msg)
    }
    if (is_array) {
      const json::array_t *ap = j->get_ptr<const json::array_t *>();
      count = (int)ap->size();
      // If the expected size is a negative one, the data request is for an allocatable
      // and the expected size is irrelevant since the outgoing array will be allocated
      // in Fortran.
      if (expected_size != -1 && count != expected_size) {
        ESMC_CHECK_RC("ESMF_RC_ATTR_ITEMSOFF", ESMF_RC_ATTR_ITEMSOFF, "values allocation size does not match size in Info storage")
      }
      for (int ii=0; ii<count; ++ii) {
        try {
          value[ii] = ap->at(ii);
        }
        catch (std::out_of_range &exc) {
          ESMC_CHECK_RC("ESMF_RC_ARG_OUTOFRANGE", ESMF_RC_ARG_OUTOFRANGE, std::string(exc.what()))
        }
        ESMC_CATCH_ERRPASSTHRU
      }
    } else {
      value[0] = info->get<{{ t.ctype }}>(local_key, nullptr, nullptr, recursive, nullptr, false);
    }
{% endif %}
    esmc_rc = ESMF_SUCCESS;
  }
  ESMC_CATCH_ISOC
}

{% endif %}{% endfor %}{% endfor %}
//-----------------------------------------------------------------------------
// InfoSet --------------------------------------------------------------------
//-----------------------------------------------------------------------------

{% for is_scalar in [True, False] %}{% for t in ts %}{% if t.ctype != "std::string" %}
{% set method_name = "ESMC_InfoSet" %}
{% if not is_scalar %}
{% set method_name = method_name~"Array" %}
{% endif %}
{% set method_name = method_name~t.esmf_suffix %}
#undef  ESMC_METHOD
#define ESMC_METHOD "{{ method_name }}()"
void {{ method_name }}(ESMCI::Info *info, char *key, {{ t.ctype }} {% if is_scalar %}&{% else %}*{% endif %}value, {% if not is_scalar %}int &count, {% endif %}bool &force, int &esmc_rc, {% if is_scalar %}int *index, {% endif %}char *pkey) {
  ESMC_CHECK_INIT(info, esmc_rc)
  esmc_rc = ESMF_FAILURE;
  try {
    std::string local_key(key);
    std::string local_pkey(pkey);
    std::string *local_pkeyp = nullptr;
    if (local_pkey.size() != 0) {local_pkeyp = &local_pkey;}
    info->set<{{ t.ctype }}>(local_key, value, {% if not is_scalar %}count, {% endif %}force, {% if is_scalar %}index, {% endif %}local_pkeyp);
{% if t.esmf_suffix in ["I4", "R4"] %}
    info->set_32bit_type_storage(local_key, true, local_pkeyp);
{% endif %}
    esmc_rc = ESMF_SUCCESS;
  }
  ESMC_CATCH_ISOC
}

{% endif %}{% endfor %}{% endfor %}
}  // extern "C"
