! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2016, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_Attribute.F90"
!==============================================================================
!
! ESMF Attribute Module
!
! (all lines between the !BOP and !EOP markers will be included in the
! automated document processing.)
!------------------------------------------------------------------------------
! one blank line for protex processing - in case all routines here are
! marked internal (BOPI/EOPI), the output file will still have contents.
!BOP

!EOP

!------------------------------------------------------------------------------
! module definition

module ESMF_AttributeMod
!
!------------------------------------------------------------------------------
! INCLUDES
^include "ESMF.h"
#include "ESMF_TypeKindMacros.hcppF90"
^ifndef ESMF_NO_INTEGER_1_BYTE
^define ESMF_NO_INTEGER_1_BYTE
^endif
^ifndef ESMF_NO_INTEGER_2_BYTE
^define ESMF_NO_INTEGER_2_BYTE
^endif

!==============================================================================
!BOPI
! !MODULE: ESMF_AttributeMod - Attribute API
!
! !DESCRIPTION:
!
! The code in this file implements the Attribute defined type
!  and functions.  This is an
!  interface to the actual C++ Attribute class implementation
!  in the ../../Infrastructure/Attribute dir.
!
! See the ESMF Developers Guide document for more details.
!
!------------------------------------------------------------------------------
! !USES:
  use ESMF_BaseMod
  use ESMF_UtilTypesMod     ! ESMF utility types
  use ESMF_InitMacrosMod    ! ESMF initializer macros
  use ESMF_LogErrMod        ! ESMF error handling
  use ESMF_ArrayMod
  use ESMF_ArrayBundleMod
  use ESMF_CompMod
  use ESMF_CplCompMod
  use ESMF_GridCompMod
  use ESMF_SciCompMod
  use ESMF_DistGridMod
  use ESMF_FieldMod
  use ESMF_FieldBundleMod
  use ESMF_GridMod
  use ESMF_StateTypesMod
  use ESMF_StateVaMod
  use ESMF_StateMod
  use ESMF_UtilMod
  use ESMF_VMMod
  use ESMF_AttributeInternalsMod

  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! ! ESMF_Attribute
!
!------------------------------------------------------------------------------

 ! Fortran class type to hold pointer to C++ object
  type ESMF_AttPack
^ifndef ESMF_NO_SEQUENCE
  sequence
^endif
  private
    type(ESMF_Pointer) :: this
    ESMF_INIT_DECLARE
  end type

!------------------------------------------------------------------------------
!
! !DESCRIPTION:
!     The following routines apply to {\tt ESMF\_Array}, {\tt ESMF\_ArrayBundle},
!     {\ESMF_DistGrid}, {\tt ESMF\_Field},{\tt ESMF\_FieldBundle}, {\tt ESMF\_Grid},
!     and {\tt ESMF\_State}.
!
! !PUBLIC MEMBER FUNCTIONS:
!
!   Classes
      public ESMF_AttPack

!  Attribute methods
      public ESMF_AttributeGetInit

      public ESMF_AttributeAdd
      public ESMF_AttributeCopy
      public ESMF_AttributeGet
      public ESMF_AttributeGetAttPack
      public ESMF_AttributeLink
      public ESMF_AttributeLinkRemove
      public ESMF_AttributeSet
      public ESMF_AttributeRead
      public ESMF_AttributeRemove
      public ESMF_AttributeUpdate
      public ESMF_AttributeWrite


!EOPI
!------------------------------------------------------------------------------
! leave the following line as-is; it will insert the cvs ident string
! into the object file for tracking purposes.
      character(*), parameter, private :: version = &
               '$Id$'
!------------------------------------------------------------------------------
!==============================================================================
!
! INTERFACE BLOCKS
!
!==============================================================================

!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeAdd  - Create Attribute packages
!
! !INTERFACE:
      interface ESMF_AttributeAdd

! !PRIVATE MEMBER FUNCTIONS:
        module procedure ESMF_ArrayAttAddPackCst
        module procedure ESMF_ArrayAttAddPackCstN
        module procedure ESMF_ArrayAttAddPackCstN1
        module procedure ESMF_ArrayAttAddPackStd
        module procedure ESMF_ArrayAttAddPackCstSL
        module procedure ESMF_ArrayAttAddPackStdSL
        module procedure ESMF_ArrayBundleAttAddPackCst
        module procedure ESMF_ArrayBundleAttAddPackCstN
        module procedure ESMF_ArrayBundleAttAddPackCstN1
        module procedure ESMF_ArrayBundleAttAddPackCstSL
        module procedure ESMF_CplCompAttAddPackStd
        module procedure ESMF_CplCompAttAddPackStdN
        module procedure ESMF_CplCompAttAddPackCst
        module procedure ESMF_CplCompAttAddPackCstN
        module procedure ESMF_CplCompAttAddPackCstN1
        module procedure ESMF_CplCompAttAddPackStdSL
        !module procedure ESMF_CplCompAttAddPackStdNSL
        module procedure ESMF_CplCompAttAddPackCstSL
        module procedure ESMF_GridCompAttAddPackStd
        module procedure ESMF_GridCompAttAddPackStdN
        module procedure ESMF_GridCompAttAddPackCst
        module procedure ESMF_GridCompAttAddPackCstN
        module procedure ESMF_GridCompAttAddPackCstN1
        module procedure ESMF_GridCompAttAddPackStdSL
        !module procedure ESMF_GridCompAttAddPackStdNSL
        module procedure ESMF_GridCompAttAddPackCstSL
        module procedure ESMF_SciCompAttAddPackStd
        module procedure ESMF_SciCompAttAddPackStdN
        module procedure ESMF_SciCompAttAddPackCst
        module procedure ESMF_SciCompAttAddPackCstN
        module procedure ESMF_SciCompAttAddPackCstN1
        module procedure ESMF_SciCompAttAddPackStdSL
        !module procedure ESMF_SciCompAttAddPackStdNSL
        module procedure ESMF_SciCompAttAddPackCstSL
        module procedure ESMF_DistGridAttAddPackCst
        module procedure ESMF_DistGridAttAddPackCstN
        module procedure ESMF_DistGridAttAddPackCstN1
        module procedure ESMF_DistGridAttAddPackCstSL
        module procedure ESMF_FieldAttAddPackStd
        module procedure ESMF_FieldAttAddPackCst
        module procedure ESMF_FieldAttAddPackCstN
        module procedure ESMF_FieldAttAddPackCstN1
        module procedure ESMF_FieldAttAddPackStdSL
        module procedure ESMF_FieldAttAddPackCstSL
        module procedure ESMF_FieldBundleAttAddPackCst
        module procedure ESMF_FieldBundleAttAddPackCstN
        module procedure ESMF_FieldBundleAttAddPackCstN1
        module procedure ESMF_FieldBundleAttAddPackCstSL
        module procedure ESMF_GridAttAddPackStd
        module procedure ESMF_GridAttAddPackCst
        module procedure ESMF_GridAttAddPackCstN
        module procedure ESMF_GridAttAddPackCstN1
        module procedure ESMF_GridAttAddPackStdSL
        module procedure ESMF_GridAttAddPackCstSL
        module procedure ESMF_StateAttAddPackStd
        module procedure ESMF_StateAttAddPackCst
        module procedure ESMF_StateAttAddPackCstN
        module procedure ESMF_StateAttAddPackCstN1
        module procedure ESMF_StateAttAddPackStdSL
        module procedure ESMF_StateAttAddPackCstSL

! !DESCRIPTION:
!     This interface provides a single entry point for methods that create
!     an Attribute package.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeCopy  - Copy an Attribute or hierarchy
!
! !INTERFACE:
      interface ESMF_AttributeCopy

! !PRIVATE MEMBER FUNCTIONS:
        module procedure ESMF_CplCompAttCopy
        module procedure ESMF_GridCompAttCopy
        module procedure ESMF_SciCompAttCopy
        module procedure ESMF_StateAttCopy

! !DESCRIPTION:
!     This interface provides a single entry point for methods that copy
!     an Attribute or Attribute hierarchy.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeRemove  - Remove an Attribute or Attribute Package
!
! !INTERFACE:
      interface ESMF_AttributeRemove

! !PRIVATE MEMBER FUNCTIONS:
        module procedure ESMF_ArrayAttRemove
        module procedure ESMF_ArrayAttRemoveAP
        module procedure ESMF_ArrayBundleAttRemove
        module procedure ESMF_ArrayBundleAttRemoveAP
        module procedure ESMF_CplCompAttRemove
        module procedure ESMF_CplCompAttRemoveAP
        module procedure ESMF_GridCompAttRemove
        module procedure ESMF_GridCompAttRemoveAP
        module procedure ESMF_SciCompAttRemove
        module procedure ESMF_SciCompAttRemoveAP
        module procedure ESMF_DistGridAttRemove
        module procedure ESMF_DistGridAttRemoveAP
        module procedure ESMF_FieldAttRemove
        module procedure ESMF_FieldAttRemoveAP
        module procedure ESMF_FieldBundleAttRemove
        module procedure ESMF_FieldBundleAttRemoveAP
        module procedure ESMF_GridAttRemove
        module procedure ESMF_GridAttRemoveAP
        module procedure ESMF_StateAttRemove
        module procedure ESMF_StateAttRemoveAP

! !DESCRIPTION:
!     This interface provides a single entry point for methods that destroy
!     an Attribute or Attribute package.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeGet  - Get Attributes, Attribute packages, count,
!              info, and type
!
! !INTERFACE:
      interface ESMF_AttributeGet

! !PRIVATE MEMBER FUNCTIONS:
        TypeKindInterfaceMacro(ESMF_ArrayAttGet)
        TypeKindInterfaceMacro(ESMF_ArrayAttGet1D)
        module procedure ESMF_ArrayAttGetLgcl
        module procedure ESMF_ArrayAttGetLgclList
        module procedure ESMF_ArrayAttGetChar
        module procedure ESMF_ArrayAttGetCharList
        TypeKindInterfaceMacro(ESMF_ArrayAttGetAP)
        TypeKindInterfaceMacro(ESMF_ArrayAttGet1DAP)
        module procedure ESMF_ArrayAttGetLgclAP
        module procedure ESMF_ArrayAttGetLgclListAP
        module procedure ESMF_ArrayAttGetCharAP
        module procedure ESMF_ArrayAttGetCharListAP
        module procedure ESMF_ArrayAttGetInfoByNam
        module procedure ESMF_ArrayAttGetInfoByNamAP
        module procedure ESMF_ArrayAttGetInfoByNum
        module procedure ESMF_ArrayAttGetInfoByNumAP
        module procedure ESMF_ArrayAttGetCount
        module procedure ESMF_ArrayAttGetCountAttPack

        TypeKindInterfaceMacro(ESMF_ArrayBundleAttGet)
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttGet1D)
        module procedure ESMF_ArrayBundleAttGetLgcl
        module procedure ESMF_ArrayBundleAttGetLgclList
        module procedure ESMF_ArrayBundleAttGetChar
        module procedure ESMF_ArrayBundleAttGetCharList
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttGetAP)
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttGet1DAP)
        module procedure ESMF_ArrayBundleAttGetLgclAP
        module procedure ESMF_ArrayBundleAttGetLgclListAP
        module procedure ESMF_ArrayBundleAttGetCharAP
        module procedure ESMF_ArrayBundleAttGetCharListAP
        module procedure ESMF_ArrayBundleAttGetInfoByNam
        module procedure ESMF_ArrayBundleAttGetInfoByNamAP
        module procedure ESMF_ArrayBundleAttGetInfoByNum
        module procedure ESMF_ArrayBundleAttGetInfoByNumAP
        module procedure ESMF_ArrayBundleAttGetCount
        module procedure ESMF_ArrayBundleAttGetCountAttPack                       

        TypeKindInterfaceMacro(ESMF_CplCompAttGet)
        TypeKindInterfaceMacro(ESMF_CplCompAttGet1D)
        module procedure ESMF_CplCompAttGetLgcl
        module procedure ESMF_CplCompAttGetLgclList
        module procedure ESMF_CplCompAttGetChar
        module procedure ESMF_CplCompAttGetCharList
        TypeKindInterfaceMacro(ESMF_CplCompAttGetAP)
        TypeKindInterfaceMacro(ESMF_CplCompAttGet1DAP)
        module procedure ESMF_CplCompAttGetLgclAP
        module procedure ESMF_CplCompAttGetLgclListAP
        module procedure ESMF_CplCompAttGetCharAP
        module procedure ESMF_CplCompAttGetCharListAP
        module procedure ESMF_CplCompAttGetInfoByNam
        module procedure ESMF_CplCompAttGetInfoByNamAP
        module procedure ESMF_CplCompAttGetInfoByNum
        module procedure ESMF_CplCompAttGetInfoByNumAP
        module procedure ESMF_CplCompAttGetCount
        module procedure ESMF_CplCompAttGetCountAttPack  
        module procedure ESMF_CplCompAttGetAPinstNames
        module procedure ESMF_CplCompAttGetAPinstNamesAP

        TypeKindInterfaceMacro(ESMF_GridCompAttGet)
        TypeKindInterfaceMacro(ESMF_GridCompAttGet1D)
        module procedure ESMF_GridCompAttGetLgcl
        module procedure ESMF_GridCompAttGetLgclList
        module procedure ESMF_GridCompAttGetChar
        module procedure ESMF_GridCompAttGetCharList
        TypeKindInterfaceMacro(ESMF_GridCompAttGetAP)
        TypeKindInterfaceMacro(ESMF_GridCompAttGet1DAP)
        module procedure ESMF_GridCompAttGetLgclAP
        module procedure ESMF_GridCompAttGetLgclListAP
        module procedure ESMF_GridCompAttGetCharAP
        module procedure ESMF_GridCompAttGetCharListAP
        module procedure ESMF_GridCompAttGetInfoByNam
        module procedure ESMF_GridCompAttGetInfoByNamAP
        module procedure ESMF_GridCompAttGetInfoByNum
        module procedure ESMF_GridCompAttGetInfoByNumAP
        module procedure ESMF_GridCompAttGetCount
        module procedure ESMF_GridCompAttGetCountAttPack  
        module procedure ESMF_GridCompAttGetAPinstNames
        module procedure ESMF_GridCompAttGetAPinstNamesAP

        TypeKindInterfaceMacro(ESMF_SciCompAttGet)
        TypeKindInterfaceMacro(ESMF_SciCompAttGet1D)
        module procedure ESMF_SciCompAttGetLgcl
        module procedure ESMF_SciCompAttGetLgclList
        module procedure ESMF_SciCompAttGetChar
        module procedure ESMF_SciCompAttGetCharList
        TypeKindInterfaceMacro(ESMF_SciCompAttGetAP)
        TypeKindInterfaceMacro(ESMF_SciCompAttGet1DAP)
        module procedure ESMF_SciCompAttGetLgclAP
        module procedure ESMF_SciCompAttGetLgclListAP
        module procedure ESMF_SciCompAttGetCharAP
        module procedure ESMF_SciCompAttGetCharListAP
        module procedure ESMF_SciCompAttGetInfoByNam
        module procedure ESMF_SciCompAttGetInfoByNamAP
        module procedure ESMF_SciCompAttGetInfoByNum
        module procedure ESMF_SciCompAttGetInfoByNumAP
        module procedure ESMF_SciCompAttGetCount
        module procedure ESMF_SciCompAttGetCountAttPack  
        module procedure ESMF_SciCompAttGetAPinstNames
        module procedure ESMF_SciCompAttGetAPinstNamesAP

        TypeKindInterfaceMacro(ESMF_DistGridAttGet)
        TypeKindInterfaceMacro(ESMF_DistGridAttGet1D)
        module procedure ESMF_DistGridAttGetLgcl
        module procedure ESMF_DistGridAttGetLgclList
        module procedure ESMF_DistGridAttGetChar
        module procedure ESMF_DistGridAttGetCharList
        TypeKindInterfaceMacro(ESMF_DistGridAttGetAP)
        TypeKindInterfaceMacro(ESMF_DistGridAttGet1DAP)
        module procedure ESMF_DistGridAttGetLgclAP
        module procedure ESMF_DistGridAttGetLgclListAP
        module procedure ESMF_DistGridAttGetCharAP
        module procedure ESMF_DistGridAttGetCharListAP
        module procedure ESMF_DistGridAttGetInfoByNam
        module procedure ESMF_DistGridAttGetInfoByNamAP
        module procedure ESMF_DistGridAttGetInfoByNum
        module procedure ESMF_DistGridAttGetInfoByNumAP
        module procedure ESMF_DistGridAttGetCount
        module procedure ESMF_DistGridAttGetCountAttPack  

        TypeKindInterfaceMacro(ESMF_FieldAttGet)
        TypeKindInterfaceMacro(ESMF_FieldAttGet1D)
        module procedure ESMF_FieldAttGetLgcl
        module procedure ESMF_FieldAttGetLgclList
        module procedure ESMF_FieldAttGetChar
        module procedure ESMF_FieldAttGetCharList
        TypeKindInterfaceMacro(ESMF_FieldAttGetAP)
        TypeKindInterfaceMacro(ESMF_FieldAttGet1DAP)
        module procedure ESMF_FieldAttGetLgclAP
        module procedure ESMF_FieldAttGetLgclListAP
        module procedure ESMF_FieldAttGetCharAP
        module procedure ESMF_FieldAttGetCharListAP
        module procedure ESMF_FieldAttGetInfoByNam
        module procedure ESMF_FieldAttGetInfoByNamAP
        module procedure ESMF_FieldAttGetInfoByNum
        module procedure ESMF_FieldAttGetInfoByNumAP
        module procedure ESMF_FieldAttGetCount
        module procedure ESMF_FieldAttGetCountAttPack

        TypeKindInterfaceMacro(ESMF_FieldBundleAttGet)
        TypeKindInterfaceMacro(ESMF_FieldBundleAttGet1D)
        module procedure ESMF_FieldBundleAttGetLgcl
        module procedure ESMF_FieldBundleAttGetLgclList
        module procedure ESMF_FieldBundleAttGetChar
        module procedure ESMF_FieldBundleAttGetCharList
        TypeKindInterfaceMacro(ESMF_FieldBundleAttGetAP)
        TypeKindInterfaceMacro(ESMF_FieldBundleAttGet1DAP)
        module procedure ESMF_FieldBundleAttGetLgclAP
        module procedure ESMF_FieldBundleAttGetLgclListAP
        module procedure ESMF_FieldBundleAttGetCharAP
        module procedure ESMF_FieldBundleAttGetCharListAP
        module procedure ESMF_FieldBundleAttGetInfoByNam
        module procedure ESMF_FieldBundleAttGetInfoByNamAP
        module procedure ESMF_FieldBundleAttGetInfoByNum
        module procedure ESMF_FieldBundleAttGetInfoByNumAP
        module procedure ESMF_FieldBundleAttGetCount
        module procedure ESMF_FieldBundleAttGetCountAttPack

        TypeKindInterfaceMacro(ESMF_GridAttGet)
        TypeKindInterfaceMacro(ESMF_GridAttGet1D)
        module procedure ESMF_GridAttGetLgcl
        module procedure ESMF_GridAttGetLgclList
        module procedure ESMF_GridAttGetChar
        module procedure ESMF_GridAttGetCharList
        TypeKindInterfaceMacro(ESMF_GridAttGetAP)
        TypeKindInterfaceMacro(ESMF_GridAttGet1DAP)
        module procedure ESMF_GridAttGetLgclAP
        module procedure ESMF_GridAttGetLgclListAP
        module procedure ESMF_GridAttGetCharAP
        module procedure ESMF_GridAttGetCharListAP
        module procedure ESMF_GridAttGetInfoByNam
        module procedure ESMF_GridAttGetInfoByNamAP
        module procedure ESMF_GridAttGetInfoByNum
        module procedure ESMF_GridAttGetInfoByNumAP
        module procedure ESMF_GridAttGetCount
        module procedure ESMF_GridAttGetCountAttPack

        TypeKindInterfaceMacro(ESMF_StateAttGet)
        TypeKindInterfaceMacro(ESMF_StateAttGet1D)
        module procedure ESMF_StateAttGetLgcl
        module procedure ESMF_StateAttGetLgclList
        module procedure ESMF_StateAttGetChar
        module procedure ESMF_StateAttGetCharList
        TypeKindInterfaceMacro(ESMF_StateAttGetAP)
        TypeKindInterfaceMacro(ESMF_StateAttGet1DAP)
        module procedure ESMF_StateAttGetLgclAP
        module procedure ESMF_StateAttGetLgclListAP
        module procedure ESMF_StateAttGetCharAP
        module procedure ESMF_StateAttGetCharListAP
        module procedure ESMF_StateAttGetInfoByNam
        module procedure ESMF_StateAttGetInfoByNamAP
        module procedure ESMF_StateAttGetInfoByNum
        module procedure ESMF_StateAttGetInfoByNumAP
        module procedure ESMF_StateAttGetCount
        module procedure ESMF_StateAttGetCountAttPack

! !DESCRIPTION:
!     This interface provides a single entry point for methods that retrieve
!     Attributes.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeGet  - Get Attributes, Attribute packages, count,
!              info, and type
!
! !INTERFACE:
      interface ESMF_AttributeGetAttPack

! !PRIVATE MEMBER FUNCTIONS:

        module procedure ESMF_ArrayAttGetAttPack
        module procedure ESMF_ArrayBundleAttGetAttPack
        module procedure ESMF_CplCompAttGetAttPack
        module procedure ESMF_GridCompAttGetAttPack
        module procedure ESMF_SciCompAttGetAttPack
        module procedure ESMF_DistGridAttGetAttPack
        module procedure ESMF_FieldAttGetAttPack
        module procedure ESMF_FieldBundleAttGetAttPack
        module procedure ESMF_GridAttGetAttPack
        module procedure ESMF_StateAttGetAttPack
        module procedure ESMF_ArrayAttGetAttPackSL
        module procedure ESMF_ArrayBundleAttGetAttPackSL
        module procedure ESMF_CplCompAttGetAttPackSL
        module procedure ESMF_GridCompAttGetAttPackSL
        module procedure ESMF_SciCompAttGetAttPackSL
        module procedure ESMF_DistGridAttGetAttPackSL
        module procedure ESMF_FieldAttGetAttPackSL
        module procedure ESMF_FieldBundleAttGetAttPackSL
        module procedure ESMF_GridAttGetAttPackSL
        module procedure ESMF_StateAttGetAttPackSL

! !DESCRIPTION:
!     This interface provides a single entry point for methods that retrieve
!     AttPacks from Attribute bearing objects.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeLink  - Link Attribute hierarchies
!
! !INTERFACE:
      interface ESMF_AttributeLink

! !PRIVATE MEMBER FUNCTIONS:
! TODO
        module procedure ESMF_ArrayBundleAttLinkArray
        module procedure ESMF_CplCompAttLinkCplComp
        module procedure ESMF_CplCompAttLinkGridComp
        module procedure ESMF_CplCompAttLinkSciComp
        module procedure ESMF_CplCompAttLinkState
        module procedure ESMF_CplCompAttLinkGrid
        module procedure ESMF_FieldBundleAttLinkField
        module procedure ESMF_FieldBundleAttLinkGrid
        module procedure ESMF_FieldAttLinkGrid
        module procedure ESMF_GridCompAttLinkCplComp
        module procedure ESMF_GridCompAttLinkGridComp
        module procedure ESMF_GridCompAttLinkSciComp
        module procedure ESMF_GridCompAttLinkState
        module procedure ESMF_GridCompAttLinkGrid
        module procedure ESMF_SciCompAttLinkCplComp
        module procedure ESMF_SciCompAttLinkGridComp
        module procedure ESMF_SciCompAttLinkSciComp
        module procedure ESMF_SciCompAttLinkState
        module procedure ESMF_SciCompAttLinkGrid
        module procedure ESMF_StateAttLinkArrayBundle
        module procedure ESMF_StateAttLinkArray
        module procedure ESMF_StateAttLinkFieldBundle
        module procedure ESMF_StateAttLinkField
        module procedure ESMF_StateAttLinkState

! !DESCRIPTION:
!     This interface provides a single entry point for methods that link
!     Attribute hierarchies.

!EOPI
      end interface
!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeLinkRemove  - Unlink Attribute hierarchies
!
! !INTERFACE:
      interface ESMF_AttributeLinkRemove

! !PRIVATE MEMBER FUNCTIONS:
! TODO
        module procedure ESMF_ArrayBundleAttLinkRmArray
        module procedure ESMF_CplCompAttLinkRmCplComp
        module procedure ESMF_CplCompAttLinkRmGridComp
        module procedure ESMF_CplCompAttLinkRmSciComp
        module procedure ESMF_CplCompAttLinkRmState
        module procedure ESMF_CplCompAttLinkRmGrid
        module procedure ESMF_FieldBundleAttLinkRmField
        module procedure ESMF_FieldBundleAttLinkRmGrid
        module procedure ESMF_FieldAttLinkRmGrid
        module procedure ESMF_GridCompAttLinkRmCplComp
        module procedure ESMF_GridCompAttLinkRmGridComp
        module procedure ESMF_GridCompAttLinkRmSciComp
        module procedure ESMF_GridCompAttLinkRmState
        module procedure ESMF_GridCompAttLinkRmGrid
        module procedure ESMF_SciCompAttLinkRmCplComp
        module procedure ESMF_SciCompAttLinkRmGridComp
        module procedure ESMF_SciCompAttLinkRmSciComp
        module procedure ESMF_SciCompAttLinkRmState
        module procedure ESMF_SciCompAttLinkRmGrid
        module procedure ESMF_StateAttLinkRmArrayBundle
        module procedure ESMF_StateAttLinkRmArray
        module procedure ESMF_StateAttLinkRmFieldBundle
        module procedure ESMF_StateAttLinkRmField
        module procedure ESMF_StateAttLinkRmState

! !DESCRIPTION:
!     This interface provides a single entry point for methods that unlink
!     Attribute hierarchies.

!EOPI
      end interface
!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeRead  - Read an Attribute or Attribute Package
!
! !INTERFACE:
      interface ESMF_AttributeRead

! !PRIVATE MEMBER FUNCTIONS:
! TODO
!        module procedure ESMF_ArrayAttRead
!        module procedure ESMF_ArrayBundleAttRead
        module procedure ESMF_CplCompAttRead
        module procedure ESMF_GridCompAttRead
        module procedure ESMF_SciCompAttRead
!        module procedure ESMF_DistGridAttRead
        module procedure ESMF_FieldAttRead
        module procedure ESMF_FieldBundleAttRead
        module procedure ESMF_GridAttRead
        module procedure ESMF_StateAttRead

! !DESCRIPTION:
!     This interface provides a single entry point for methods that read
!     an Attribute or Attribute package.

!EOPI
      end interface
!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeSet  - Set Attributes and Attribute packages
!
! !INTERFACE:
      interface ESMF_AttributeSet

! !PRIVATE MEMBER FUNCTIONS:
        TypeKindInterfaceMacro(ESMF_ArrayAttSet)
        TypeKindInterfaceMacro(ESMF_ArrayAttSet1D)
        module procedure ESMF_ArrayAttSetLgcl
        module procedure ESMF_ArrayAttSetLgclList
        module procedure ESMF_ArrayAttSetChar
        module procedure ESMF_ArrayAttSetCharList
        TypeKindInterfaceMacro(ESMF_ArrayAttSetAP)
        TypeKindInterfaceMacro(ESMF_ArrayAttSet1DAP)
        module procedure ESMF_ArrayAttSetLgclAP
        module procedure ESMF_ArrayAttSetLgclListAP
        module procedure ESMF_ArrayAttSetCharAP
        module procedure ESMF_ArrayAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_ArrayBundleAttSet)
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttSet1D)
        module procedure ESMF_ArrayBundleAttSetLgcl
        module procedure ESMF_ArrayBundleAttSetLgclList
        module procedure ESMF_ArrayBundleAttSetChar
        module procedure ESMF_ArrayBundleAttSetCharList
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttSetAP)
        TypeKindInterfaceMacro(ESMF_ArrayBundleAttSet1DAP)
        module procedure ESMF_ArrayBundleAttSetLgclAP
        module procedure ESMF_ArrayBundleAttSetLgclListAP
        module procedure ESMF_ArrayBundleAttSetCharAP
        module procedure ESMF_ArrayBundleAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_CplCompAttSet)
        TypeKindInterfaceMacro(ESMF_CplCompAttSet1D)
        module procedure ESMF_CplCompAttSetLgcl
        module procedure ESMF_CplCompAttSetLgclList
        module procedure ESMF_CplCompAttSetChar
        module procedure ESMF_CplCompAttSetCharList
        TypeKindInterfaceMacro(ESMF_CplCompAttSetAP)
        TypeKindInterfaceMacro(ESMF_CplCompAttSet1DAP)
        module procedure ESMF_CplCompAttSetLgclAP
        module procedure ESMF_CplCompAttSetLgclListAP
        module procedure ESMF_CplCompAttSetCharAP
        module procedure ESMF_CplCompAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_GridCompAttSet)
        TypeKindInterfaceMacro(ESMF_GridCompAttSet1D)
        module procedure ESMF_GridCompAttSetLgcl
        module procedure ESMF_GridCompAttSetLgclList
        module procedure ESMF_GridCompAttSetChar
        module procedure ESMF_GridCompAttSetCharList
        TypeKindInterfaceMacro(ESMF_GridCompAttSetAP)
        TypeKindInterfaceMacro(ESMF_GridCompAttSet1DAP)
        module procedure ESMF_GridCompAttSetLgclAP
        module procedure ESMF_GridCompAttSetLgclListAP
        module procedure ESMF_GridCompAttSetCharAP
        module procedure ESMF_GridCompAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_SciCompAttSet)
        TypeKindInterfaceMacro(ESMF_SciCompAttSet1D)
        module procedure ESMF_SciCompAttSetLgcl
        module procedure ESMF_SciCompAttSetLgclList
        module procedure ESMF_SciCompAttSetChar
        module procedure ESMF_SciCompAttSetCharList
        TypeKindInterfaceMacro(ESMF_SciCompAttSetAP)
        TypeKindInterfaceMacro(ESMF_SciCompAttSet1DAP)
        module procedure ESMF_SciCompAttSetLgclAP
        module procedure ESMF_SciCompAttSetLgclListAP
        module procedure ESMF_SciCompAttSetCharAP
        module procedure ESMF_SciCompAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_DistGridAttSet)
        TypeKindInterfaceMacro(ESMF_DistGridAttSet1D)
        module procedure ESMF_DistGridAttSetLgcl
        module procedure ESMF_DistGridAttSetLgclList
        module procedure ESMF_DistGridAttSetChar
        module procedure ESMF_DistGridAttSetCharList
        TypeKindInterfaceMacro(ESMF_DistGridAttSetAP)
        TypeKindInterfaceMacro(ESMF_DistGridAttSet1DAP)
        module procedure ESMF_DistGridAttSetLgclAP
        module procedure ESMF_DistGridAttSetLgclListAP
        module procedure ESMF_DistGridAttSetCharAP
        module procedure ESMF_DistGridAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_FieldAttSet)
        TypeKindInterfaceMacro(ESMF_FieldAttSet1D)
        module procedure ESMF_FieldAttSetLgcl
        module procedure ESMF_FieldAttSetLgclList
        module procedure ESMF_FieldAttSetChar
        module procedure ESMF_FieldAttSetCharList
        TypeKindInterfaceMacro(ESMF_FieldAttSetAP)
        TypeKindInterfaceMacro(ESMF_FieldAttSet1DAP)
        module procedure ESMF_FieldAttSetLgclAP
        module procedure ESMF_FieldAttSetLgclListAP
        module procedure ESMF_FieldAttSetCharAP
        module procedure ESMF_FieldAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_FieldBundleAttSet)
        TypeKindInterfaceMacro(ESMF_FieldBundleAttSet1D)
        module procedure ESMF_FieldBundleAttSetLgcl
        module procedure ESMF_FieldBundleAttSetLgclList
        module procedure ESMF_FieldBundleAttSetChar
        module procedure ESMF_FieldBundleAttSetCharList
        TypeKindInterfaceMacro(ESMF_FieldBundleAttSetAP)
        TypeKindInterfaceMacro(ESMF_FieldBundleAttSet1DAP)
        module procedure ESMF_FieldBundleAttSetLgclAP
        module procedure ESMF_FieldBundleAttSetLgclListAP
        module procedure ESMF_FieldBundleAttSetCharAP
        module procedure ESMF_FieldBundleAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_GridAttSet)
        TypeKindInterfaceMacro(ESMF_GridAttSet1D)
        module procedure ESMF_GridAttSetLgcl
        module procedure ESMF_GridAttSetLgclList
        module procedure ESMF_GridAttSetChar
        module procedure ESMF_GridAttSetCharList
        TypeKindInterfaceMacro(ESMF_GridAttSetAP)
        TypeKindInterfaceMacro(ESMF_GridAttSet1DAP)
        module procedure ESMF_GridAttSetLgclAP
        module procedure ESMF_GridAttSetLgclListAP
        module procedure ESMF_GridAttSetCharAP
        module procedure ESMF_GridAttSetCharListAP

        TypeKindInterfaceMacro(ESMF_StateAttSet)
        TypeKindInterfaceMacro(ESMF_StateAttSet1D)
        module procedure ESMF_StateAttSetLgcl
        module procedure ESMF_StateAttSetLgclList
        module procedure ESMF_StateAttSetChar
        module procedure ESMF_StateAttSetCharList
        TypeKindInterfaceMacro(ESMF_StateAttSetAP)
        TypeKindInterfaceMacro(ESMF_StateAttSet1DAP)
        module procedure ESMF_StateAttSetLgclAP
        module procedure ESMF_StateAttSetLgclListAP
        module procedure ESMF_StateAttSetCharAP
        module procedure ESMF_StateAttSetCharListAP

! !DESCRIPTION:
!     This interface provides a single entry point for methods that attach
!     Attributes and Attribute packages, and link Attribute hierarchies.

!EOPI
      end interface
!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeWrite  - Write an Attribute or Attribute Package
!
! !INTERFACE:
      interface ESMF_AttributeWrite

! !PRIVATE MEMBER FUNCTIONS:
        module procedure ESMF_ArrayAttWrite
        module procedure ESMF_ArrayBundleAttWrite
        module procedure ESMF_CplCompAttWrite
        module procedure ESMF_GridCompAttWrite
        module procedure ESMF_SciCompAttWrite
        module procedure ESMF_DistGridAttWrite
        module procedure ESMF_FieldAttWrite
        module procedure ESMF_FieldBundleAttWrite
        module procedure ESMF_GridAttWrite
        module procedure ESMF_StateAttWrite

! !DESCRIPTION:
!     This interface provides a single entry point for methods that write
!     an Attribute or Attribute package.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_AttributeUpdate  - Update an Attribute hierarchy
!
! !INTERFACE:
      interface ESMF_AttributeUpdate

! !PRIVATE MEMBER FUNCTIONS:
        module procedure ESMF_CplCompAttUpdate
        module procedure ESMF_GridCompAttUpdate
        module procedure ESMF_SciCompAttUpdate
        module procedure ESMF_FieldAttUpdate
        module procedure ESMF_FieldBundleAttUpdate
        module procedure ESMF_StateAttUpdate

! !DESCRIPTION:
!     This interface provides a single entry point for methods that update
!     an Attribute hierarchy.

!EOPI
      end interface

!
!------------------------------------------------------------------------------
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add an ESMF standard Attribute package using a specification list
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackStdSL(<object>, specList, keywordEnforcer, &
!       attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)               :: specList(:)
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     type(ESMF_AttPack),  intent(inout), optional  :: attpack
!     integer,             intent(out),   optional  :: rc
!
! !DESCRIPTION:
!     Add an ESMF standard Attribute package.  See Section~\ref{sec:AttPacks}
!     for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [specList]
!           A character list of values which identify the Attribute package, such as
!           convention, purpose, and instancename.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add a custom Attribute package or modify an existing Attribute package using a specification list
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackCstSL(<object>, specList, &
!       attrList, keywordEnforcer, count, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: specList(:)
!     character (len = *), intent(in)              :: attrList(:)
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     integer,             intent(in),    optional :: count
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add a custom Attribute package to <object>.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [specList]
!           A character list of values which identify the Attribute package, such as
!           convention, purpose, and instancename.
!     \item [attrList]
!           The list of Attribute names to specify the custom Attribute package.
!     \item [{[count]}]
!           The number of Attributes to add to the custom Attribute package.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add an ESMF standard Attribute package
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackStd(<object>, convention, purpose, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: convention
!     character (len = *), intent(in)              :: purpose
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add an ESMF standard Attribute package.  See Section~\ref{sec:AttPacks}
!     for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the new Attribute package.
!     \item [purpose]
!           The purpose of the new Attribute package.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add an ESMF standard Attribute package containing nested standard Attribute packages
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackStdN(<object>, convention, purpose, &
!       nestConvention, nestPurpose, nestAttPackInstanceCountList, &
!       nestAttPackInstanceNameList, nestCount, &
!       nestAttPackInstanceNameCount, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: convention
!     character (len = *), intent(in)              :: purpose
!     character (len = *), intent(in)              :: nestConvention(:)
!     character (len = *), intent(in)              :: nestPurpose(:)
!     integer,             intent(in)              :: nestAttPackInstanceCountList(:)
!     character (len = *), intent(out)             :: nestAttPackInstanceNameList(:)
!     integer,             intent(in),    optional :: nestCount
!     integer,             intent(out),   optional :: nestAttPackInstanceNameCount
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add an ESMF standard Attribute package which contains a user-specified
!     number of nested standard Attribute packages.  ESMF generates and returns
!     default instance names for the nested Attribute packages.  These names
!     can be used later to distinguish among multiple nested Attribute
!     packages of the same type in calls to {\tt ESMF\_AttributeGet()},
!     {\tt ESMF\_AttributeSet()}, and {\tt ESMF\_AttributeRemove()}.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(inout) :: comp
!     \item type(ESMF\_GridComp), intent(inout) :: comp
!     \item type(ESMF\_SciComp),  intent(inout) :: comp
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the new Attribute package.
!     \item [purpose]
!           The purpose of the new Attribute package.
!     \item [nestConvention]
!           The convention(s) of the standard Attribute package(s) around
!           which to nest the new Attribute package.
!     \item [nestPurpose]
!           The purpose(s) of the standard Attribute package(s) around
!           which to nest the new Attribute package.
!     \item [nestAttPackInstanceCountList]
!           The desired number of nested Attribute package instances for each
!           nested (nestConvention, nestPurpose) package type. Note: if only one
!           of each nested package type is desired, then the
!           {\tt ESMF\_AttributeAdd()} overloaded method
!           {\tt ESMF\_AttAddPackStd()} should be used.
!     \item [nestAttPackInstanceNameList]
!           The name(s) of the nested Attribute package instances, generated
!           by ESMF, used to distinguish between multiple instances of the
!           same convention and purpose.
!     \item [{[nestCount]}]
!           The count of the number of nested Attribute package types to add to
!           the new Attribute package.
!     \item [{[nestAttPackInstanceNameCount]}]
!           The number of nested Attribute package instance names.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add a custom Attribute package or modify an existing Attribute package
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackCst(<object>, convention, purpose, &
!       attrList, count, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: convention
!     character (len = *), intent(in)              :: purpose
!     character (len = *), intent(in)              :: attrList(:)
!     integer,             intent(in),    optional :: count
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add a custom Attribute package to <object>.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the Attribute package.
!     \item [purpose]
!           The purpose of the Attribute package.
!     \item [attrList]
!           The list of Attribute names to specify the custom Attribute package.
!     \item [{[count]}]
!           The number of Attributes to add to the custom Attribute package.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add a custom Attribute package with nested Attribute packages or modify an existing Attribute package
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackCstN(<object>, convention, purpose, &
!       attrList, count, nestConvention, nestPurpose, nestCount, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: convention
!     character (len = *), intent(in)              :: purpose
!     character (len = *), intent(in),    optional :: attrList(:)
!     integer,             intent(in),    optional :: count
!     character (len = *), intent(in)              :: nestConvention(:)
!     character (len = *), intent(in)              :: nestPurpose(:)
!     integer,             intent(in),    optional :: nestCount
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add a custom Attribute package, with one or more nested Attribute
!     packages, to <object>.  Allows for building full multiple-child Attribute
!     hierarchies (multi-child trees).
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the Attribute package.
!     \item [purpose]
!           The purpose of the Attribute package.
!     \item [{[attrList]}]
!           The list of Attribute names to specify the custom Attribute package.
!     \item [{[count]}]
!           The number of Attributes to add to the custom Attribute package.
!     \item [nestConvention]
!           The convention(s) of the Attribute package(s) around which to nest
!           the new Attribute package.
!     \item [nestPurpose]
!           The purpose(s) of the Attribute package(s) around which to nest the
!           new Attribute package.
!     \item [{[nestCount]}]
!           The number of nested Attribute packages to add to the custom
!           Attribute package.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeAdd  - Add a custom Attribute package with a single nested Atrribute package, or modify an existing Attribute package
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeAdd()
!     subroutine ESMF_AttAddPackCstN1(<object>, convention, purpose, &
!       attrList, count, nestConvention, nestPurpose, attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in)              :: convention
!     character (len = *), intent(in)              :: purpose
!     character (len = *), intent(in),    optional :: attrList(:)
!     integer,             intent(in),    optional :: count
!     character (len = *), intent(in)              :: nestConvention
!     character (len = *), intent(in)              :: nestPurpose
!     type(ESMF_AttPack),  intent(inout), optional :: attpack
!     integer,             intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Add a custom Attribute package, with a single nested Attribute
!     package, to <object>.  Allows for building single-child Attribute
!     hierarchies (single-child trees).
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the Attribute package.
!     \item [purpose]
!           The purpose of the Attribute package.
!     \item [{[attrList]}]
!           The list of Attribute names to specify the custom Attribute package.
!     \item [{[count]}]
!           The number of Attributes to add to the custom Attribute package.
!     \item [nestConvention]
!           The convention of the Attribute package around which to nest
!           the new Attribute package.
!     \item [nestPurpose]
!           The purpose of the Attribute package around which to nest the
!           new Attribute package.
!     \item [{[attpack]}]
!           An optional handle to the Attribute package that is to be created.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeCopy - Copy an Attribute hierarchy
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeCopy()
!     subroutine ESMF_AttributeCopy(<object1>, <object2>, copyflag, &
!       atttreeflag, rc)
!
! !ARGUMENTS:
!     <object1>, see below for supported values
!     <object2>, see below for supported values
!     type(ESMF_Copy_Flag),   intent(in)            :: copyflag
!     type(ESMF_AttTreeFlag), intent(in)            :: atttreeflag
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Copy an Attribute hierarchy from <object1> to <object2>.  The
!     default behavior is to ignore (instead of replace) values on
!     pre-existing Attributes.
!
!     Supported values for <object1> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(in) :: comp1
!     \item type(ESMF\_GridComp), intent(in) :: comp1
!     \item type(ESMF\_SciComp),  intent(in) :: comp1
!     \item type(ESMF\_State),    intent(in) :: state
!     \end{description}
!
!     Supported values for <object2> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(inout) :: comp2
!     \item type(ESMF\_GridComp), intent(inout) :: comp2
!     \item type(ESMF\_SciComp),  intent(inout) :: comp2
!     \item type(ESMF\_State),    intent(inout) :: state
!     \end{description}
!
!     NOTE: Copies between different ESMF object types are not possible at this time.
!
!     The arguments are:
!     \begin{description}
!     \item [<object1>]
!           An {\tt ESMF} object.
!     \item [<object2>]
!           An {\tt ESMF} object.
!     \item [copyflag]
!           A flag to determine if the copy is to be by reference, value,
!           or both.  This flag is documented in section \ref{const:copy}.
!     \item [atttreeflag]
!           A flag to determine if the copy is supposed to descend the
!           Attribute hierarchy. This flag is documented in section \ref{const:atttree}.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get an Attribute from an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, attpack, <value> &
!       keywordEnforcer, <defaultvalue>, attnestflag, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     type(ESMF_AttPack),     intent(inout)         :: attpack
!     <value>, see below for supported values
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     <defaultvalue>, see below for supported values
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt value} from the <object>, or from an Attribute
!     package on the <object>, specified by {\tt attpack}.  Internal information can also
!     be retrieved from Grid objects by prepending 'ESMF:' to the name of the
!     piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on which pieces of Grid data can be retrieved through this interface.
!     A {\tt defaultvalue} argument
!     may be given if a return code is not desired when the Attribute is not
!     found.  See Section~\ref{sec:AttPacks} for a description of Attribute
!     packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     Supported values for <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: value
!     \item integer(ESMF\_KIND\_I8), intent(out) :: value
!     \item real (ESMF\_KIND\_R4),   intent(out) :: value
!     \item real (ESMF\_KIND\_R8),   intent(out) :: value
!     \item logical,                 intent(out) :: value
!     \item character (len = *),     intent(out) :: value
!     \end{description}
!
!     Supported values for <defaultvalue> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalue
!     \item integer(ESMF\_KIND\_I8), intent(in), optional :: defaultvalue
!     \item real (ESMF\_KIND\_R4),   intent(in), optional :: defaultvalue
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalue
!     \item logical,                 intent(in), optional :: defaultvalue
!     \item character (len = *),     intent(in), optional :: defaultvalue
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [<value>]
!           The value of the named Attribute.
!     \item [{[<defaultvalue>]}]
!           The default value of the named Attribute.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get an Attribute pointing to internal class information from an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, attpack, <value>, &
!       keywordEnforcer, <defaultvalue>, inputList, attnestflag, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),   intent(in)             :: name
!     type(ESMF_AttPack),    intent(inout)          :: attpack
!     <value>, see below for supported values
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     <defaultvalue>, see below for supported values
!     character (len = *),    intent(in),  optional :: inputList(:)
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt value} from the <object>, or from an Attribute
!     package on the <object>, specified by {\tt attpack}.  Internal class information can
!     be retrieved by prepending 'ESMF:' to the name of the
!     piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on this capability.
!     A {\tt defaultvalue} argument
!     may be given if a return code is not desired when the Attribute is not
!     found.  See Section~\ref{sec:AttPacks} for a description of Attribute
!     packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid), intent(in) :: grid
!     \end{description}
!
!     Supported values for <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: value
!     \item character (len = *),     intent(out) :: value
!     \end{description}
!
!     Supported values for <defaultvalue> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalue
!     \item character (len = *),     intent(in), optional :: defaultvalue
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [<value argument>]
!           The value of the named Attribute.
!     \item [{[<defaultvalue argument>]}]
!           The default value of the named Attribute.
!     \item [{[inputList]}]
!           A list of the input parameters required to retrieve internal info.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get an Attribute from an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, attpack, <valueList>, &
!       keywordEnforcer, <defaultvalueList>, attnestflag, itemCount, &
!       isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     type(ESMF_AttPack),     intent(inout)         :: attpack
!     <valueList>, see below for supported values
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     <defaultvalueList>, see below for supported values
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     integer,                intent(out), optional :: itemCount
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt valueList} from the <object>, or from an
!     Attribute package on the <object>, specified by {\tt attpack}.  Internal
!     information can also be retrieved from Grid objects by prepending 'ESMF:'
!     to the name of the piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on which pieces of Grid data can be retrieved through this interface.
!     A {\tt defaultvalueList} list argument may be given if
!     a return code is not desired when the Attribute is not found.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     Supported values for <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: valueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(out) :: valueList(:)
!     \item logical,                 intent(out) :: valueList(:)
!     \item character (len = *),     intent(out) :: valueList(:)
!     \end{description}
!
!     Supported values for <defaultvalueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalueList(:)
!     \item logical,                 intent(in), optional :: defaultvalueList(:)
!     \item character (len = *),     intent(in), optional :: defaultvalueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [<valueList>]
!           The valueList of the named Attribute.
!     \item [{[<defaultvalueList>]}]
!           The default value list of the named Attribute.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get an Attribute pointing to internal class information from an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, attpack, <valueList>, &
!       keywordEnforcer, <defaultvalueList>, inputList, attnestflag, &
!       itemCount, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     type(ESMF_AttPack),     intent(inout)         :: attpack
!     <valueList>, see below for supported values
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     <defaultvalueList>, see below for supported values
!     character (len = *),    intent(in),  optional :: inputList(:)
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     integer,                intent(out), optional :: itemCount
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt valueList} from the <object>, or from an
!     Attribute package on the <object>, specified by {\tt attpack}.  Internal class
!     information can be retrieved by prepending 'ESMF:'
!     to the name of the piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on this capability.
!     A {\tt defaultvalueList} list argument may be given if
!     a return code is not desired when the Attribute is not found.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \end{description}
!
!     Supported values for <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(out) :: valueList(:)
!     \item logical,                 intent(out) :: valueList(:)
!     \end{description}
!
!     Supported values for <defaultvalueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalueList(:)
!     \item logical,                 intent(in), optional :: defaultvalueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [<valueList>]
!           The valueList of the named Attribute.
!     \item [{[<defaultvalueList>]}]
!           The default value list of the named Attribute.
!     \item [{[inputList]}]
!           A list of the input parameters required to retrieve internal info.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get an Attribute
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, <value>, <defaultvalue>, &
!       convention, purpose, attPackInstanceName, attnestflag, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     <value>, see below for supported values
!     <defaultvalue>, see below for supported values
!     character (len = *),    intent(in),  optional :: convention
!     character (len = *),    intent(in),  optional :: purpose
!     character (len = *),    intent(in),  optional :: attPackInstanceName
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt value} from the <object>, or from an Attribute
!     package on the <object>, specified by {\tt convention}, 
!     {\tt purpose}, and {\tt attPackInstanceName}.  Internal information can also
!     be retrieved from Grid objects by prepending 'ESMF:' to the name of the
!     piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on which pieces of Grid data can be retrieved through this interface.
!     A {\tt defaultvalue} argument
!     may be given if a return code is not desired when the Attribute is not
!     found.  See Section~\ref{sec:AttPacks} for a description of Attribute
!     packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     Supported values for <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: value
!     \item integer(ESMF\_KIND\_I8), intent(out) :: value
!     \item real (ESMF\_KIND\_R4),   intent(out) :: value
!     \item real (ESMF\_KIND\_R8),   intent(out) :: value
!     \item logical,                 intent(out) :: value
!     \item character (len = *),     intent(out) :: value
!     \end{description}
!
!     Supported values for <defaultvalue> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalue
!     \item integer(ESMF\_KIND\_I8), intent(in), optional :: defaultvalue
!     \item real (ESMF\_KIND\_R4),   intent(in), optional :: defaultvalue
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalue
!     \item logical,                 intent(in), optional :: defaultvalue
!     \item character (len = *),     intent(in), optional :: defaultvalue
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [<value>]
!           The value of the named Attribute.
!     \item [{[<defaultvalue>]}]
!           The default value of the named Attribute.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get an Attribute pointing to internal class information
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, <value>, <defaultvalue>, &
!       inputList, convention, purpose, attPackInstanceName, attnestflag, &
!       isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     <value>, see below for supported values
!     <defaultvalue>, see below for supported values
!     character (len = *),    intent(in),  optional :: inputList(:)
!     character (len = *),    intent(in),  optional :: convention
!     character (len = *),    intent(in),  optional :: purpose
!     character (len = *),    intent(in),  optional :: attPackInstanceName
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt value} from the <object>, or from an Attribute
!     package on the <object>, specified by {\tt convention}, 
!     {\tt purpose}, and {\tt attPackInstanceName}.  Internal class information can
!     be retrieved by prepending 'ESMF:' to the name of the
!     piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on this capability.
!     A {\tt defaultvalue} argument
!     may be given if a return code is not desired when the Attribute is not
!     found.  See Section~\ref{sec:AttPacks} for a description of Attribute
!     packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid), intent(in) :: grid
!     \end{description}
!
!     Supported values for <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: value
!     \item character (len = *),     intent(out) :: value
!     \end{description}
!
!     Supported values for <defaultvalue> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalue
!     \item character (len = *),     intent(in), optional :: defaultvalue
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [<value argument>]
!           The value of the named Attribute.
!     \item [{[<defaultvalue argument>]}]
!           The default value of the named Attribute.
!     \item [{[inputList]}]
!           A list of the input parameters required to retrieve internal info.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get an Attribute
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, <valueList>, &
!       <defaultvalueList>, convention, purpose, attPackInstanceName, &
!       attnestflag, itemCount, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     <valueList>, see below for supported values
!     <defaultvalueList>, see below for supported values
!     character (len = *),    intent(in),  optional :: convention
!     character (len = *),    intent(in),  optional :: purpose
!     character (len = *),    intent(in),  optional :: attPackInstanceName
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     integer,                intent(out), optional :: itemCount
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt valueList} from the <object>, or from an
!     Attribute package on the <object>, specified by {\tt convention}, 
!     {\tt purpose}, and {\tt attPackInstanceName}.  Internal
!     information can also be retrieved from Grid objects by prepending 'ESMF:'
!     to the name of the piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on which pieces of Grid data can be retrieved through this interface.
!     A {\tt defaultvalueList} list argument may be given if
!     a return code is not desired when the Attribute is not found.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     Supported values for <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: valueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(out) :: valueList(:)
!     \item logical,                 intent(out) :: valueList(:)
!     \item character (len = *),     intent(out) :: valueList(:)
!     \end{description}
!
!     Supported values for <defaultvalueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalueList(:)
!     \item logical,                 intent(in), optional :: defaultvalueList(:)
!     \item character (len = *),     intent(in), optional :: defaultvalueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [<valueList>]
!           The valueList of the named Attribute.
!     \item [{[<defaultvalueList>]}]
!           The default value list of the named Attribute.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get an Attribute pointing to internal class information
!
! !INTERFACE:
!     subroutine ESMF_AttributeGet(<object>, name, <valueList>, &
!       <defaultvalueList>, inputList, convention, purpose, attPackInstanceName, &
!       attnestflag, itemCount, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),    intent(in)            :: name
!     <valueList>, see below for supported values
!     <defaultvalueList>, see below for supported values
!     character (len = *),    intent(in),  optional :: inputList(:)
!     character (len = *),    intent(in),  optional :: convention
!     character (len = *),    intent(in),  optional :: purpose
!     character (len = *),    intent(in),  optional :: attPackInstanceName
!     type(ESMF_AttNest_Flag),intent(in),  optional :: attnestflag
!     integer,                intent(out), optional :: itemCount
!     logical,                intent(out), optional :: isPresent
!     integer,                intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return an Attribute {\tt valueList} from the <object>, or from an
!     Attribute package on the <object>, specified by {\tt convention}, 
!     {\tt purpose}, and {\tt attPackInstanceName}.  Internal class
!     information can be retrieved by prepending 'ESMF:'
!     to the name of the piece of information that is requested.  See
!     Section~\ref{sec:InternalInfo} for more information
!     on this capability.
!     A {\tt defaultvalueList} list argument may be given if
!     a return code is not desired when the Attribute is not found.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \end{description}
!
!     Supported values for <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(out) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(out) :: valueList(:)
!     \item logical,                 intent(out) :: valueList(:)
!     \end{description}
!
!     Supported values for <defaultvalueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in), optional :: defaultvalueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in), optional :: defaultvalueList(:)
!     \item logical,                 intent(in), optional :: defaultvalueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to retrieve.
!     \item [<valueList>]
!           The valueList of the named Attribute.
!     \item [{[<defaultvalueList>]}]
!           The default value list of the named Attribute.
!     \item [{[inputList]}]
!           A list of the input parameters required to retrieve internal info.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get the Attribute count
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetCount(<object>, count, attcountflag, &
!                                       attnestflag, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     integer,                    intent(out)           :: count
!     type(ESMF_AttGetCountFlag), intent(in),  optional :: attcountflag
!     type(ESMF_AttNest_Flag),    intent(in),  optional :: attnestflag
!     integer,                    intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return the Attribute count for <object>.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [count]
!           The number of all existing Attributes of the type designated in the
!           {\it attcountflag}, not just Attribute that have been set.
!     \item [{[attcountflag]}]
!           The flag to specify which attribute count to return, the
!           default is ESMF\_ATTGETCOUNT\_ATTRIBUTE.  This flag is documented
!           in section \ref{const:attgetcount}.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get Attribute info by name from an ESMF_AttPack 
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetInfoByNamAP(<object>, name, attpack, &
!       keywordEnforcer, attnestflag, typekind, itemCount, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),      intent(in)            :: name
!     type(ESMF_AttPack),       intent(inout)         :: attpack
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     type(ESMF_AttNest_Flag),  intent(in),  optional :: attnestflag
!     type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
!     integer,                  intent(out), optional :: itemCount
!     logical,                  intent(out), optional :: isPresent
!     integer,                  intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return information associated with an Attribute in an Attribute package,
!     including {\tt typekind} and {\tt itemCount}.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to query.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[typekind}]]
!           The typekind of the Attribute.
!     \item [{[itemCount]}]
!           The number of items in this Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get Attribute info by name
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetInfoByNam(<object>, name, keywordEnforcer, &
!       convention, purpose, attPackInstanceName, &
!       attnestflag, typekind, itemCount, isPresent, rc)
!       
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),      intent(in)            :: name
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     character (len=*),        intent(in),  optional :: convention
!     character (len=*),        intent(in),  optional :: purpose
!     character (len=*),        intent(in),  optional :: attPackInstanceName
!     type(ESMF_AttNest_Flag),  intent(in),  optional :: attnestflag
!     type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
!     integer,                  intent(out), optional :: itemCount
!     logical,                  intent(out), optional :: isPresent
!     integer,                  intent(out), optional :: rc
!
! !DESCRIPTION:
!     Return information associated with the named Attribute,
!     including {\tt typekind} and {\tt itemCount}.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to query.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.  (Not implemented yet)
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[typekind}]]
!           The typekind of the Attribute.
!     \item [{[itemCount]}]
!           The number of items in this Attribute.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet - Get Attribute info by index number
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetInfoByNum(<object>, attributeIndex, &
!       name, attnestflag, typekind, itemcount, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     integer,                  intent(in)            :: attributeIndex
!     character (len = *),      intent(out)           :: name
!     type(ESMF_AttNest_Flag),  intent(in),  optional :: attnestflag
!     type(ESMF_TypeKind_Flag), intent(out), optional :: typekind
!     integer,                  intent(out), optional :: itemCount
!     integer,                  intent(out), optional :: rc
!
! !DESCRIPTION:
!     Returns information associated with the indexed Attribute,
!     including {\tt name}, {\tt typekind} and {\tt itemCount}.  Keep in
!     mind that these indexes start from 1, as expected in a Fortran API.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [attributeIndex]
!           The index number of the Attribute to query.
!     \item [name]
!           The name of the Attribute.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when looking for this Attribute, the default
!           is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in section
!           \ref{const:attnest}.
!     \item [{[typekind]}]
!           The typekind of the Attribute.
!     \item [{[itemCount]}]
!           The number of items in this Attribute.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get Attribute package instance names from an ESMF_AttPack
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetAPinstNamesAP(<object>, attpack, &
!       attPackInstanceNameList, attPackInstanceNameCount, keywordEnforcer, &
!       attnestflag, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     type(ESMF_AttPack),      intent(inout)         :: attpack
!     character (len = *),     intent(out)           :: attPackInstanceNameList(:)
!     integer,                 intent(out)           :: attPackInstanceNameCount
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     type(ESMF_AttNest_Flag), intent(in),  optional :: attnestflag
!     integer,                 intent(out), optional :: rc
!
! !DESCRIPTION:
!     Get the Attribute package instance names of the ESMF\_AttPack.  
!     Also get the number of such names.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(in) :: comp
!     \item type(ESMF\_GridComp), intent(in) :: comp
!     \item type(ESMF\_SciComp),  intent(in) :: comp
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [attPackInstanceNameList]
!           The name(s) of the Attribute package instances of the given
!           convention and purpose.
!     \item [attPackInstanceNameCount]
!           The number of Attribute package instance names.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when searching for this Attribute package,
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented
!           in section \ref{const:attnest}.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGet  - Get Attribute package instance names
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGet()
!     subroutine ESMF_AttributeGetAPinstNames(<object>, convention, purpose, &
!       attPackInstanceNameList, attPackInstanceNameCount, attnestflag, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),     intent(in),           :: convention
!     character (len = *),     intent(in),           :: purpose
!     character (len = *),     intent(out)           :: attPackInstanceNameList(:)
!     integer,                 intent(out)           :: attPackInstanceNameCount
!     type(ESMF_AttNest_Flag), intent(in),  optional :: attnestflag
!     integer,                 intent(out), optional :: rc
!
! !DESCRIPTION:
!     Get the Attribute package instance names of the specified convention
!     and purpose.  Also get the number of such names.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages
!     and their conventions, purposes, and object types.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(in) :: comp
!     \item type(ESMF\_GridComp), intent(in) :: comp
!     \item type(ESMF\_SciComp),  intent(in) :: comp
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the Attribute package instances.
!     \item [purpose]
!           The purpose of the Attribute package instances.
!     \item [attPackInstanceNameList]
!           The name(s) of the Attribute package instances of the given
!           convention and purpose.
!     \item [attPackInstanceNameCount]
!           The number of Attribute package instance names.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when searching for this Attribute package,
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented
!           in section \ref{const:attnest}.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGetAttPack  - Get an ESMF Attribute package object using a specification list
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGetAttPack()
!     subroutine ESMF_AttGetAttPackSL(<object>, specList, keywordEnforcer,
!       attpack, attnestflag, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),     intent(in)              :: specList(:)
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     type(ESMF_AttPack),      intent(inout), optional :: attpack
!     type(ESMF_AttNest_Flag), intent(in),    optional :: attnestflag
!     logical,                 intent(out),   optional :: isPresent
!     integer,                 intent(out),   optional :: rc
!
! !DESCRIPTION:
!     Get an ESMF Attribute package object.  See Section~\ref{sec:AttPacks}
!     for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [specList]
!           A character list of values which identify the Attribute package, 
!           such as convention, purpose, and instancename.
!     \item [{[attpack]}]
!           A handle to the Attribute package.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when searching for this Attribute package, the
!           default is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in
!           section \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute package is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeGetAttPack  - Get an ESMF Attribute package object
!
! !INTERFACE:
!     ! Private name; call using ESMF_AttributeGetAttPack()
!     subroutine ESMF_AttGetAttPack(<object>, convention, purpose, keywordEnforcer
!       attPackInstanceName, attpack, attnestflag, isPresent, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),     intent(in)               :: convention
!     character (len = *),     intent(in)               :: purpose
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     character (len = *),     intent(in),     optional :: attPackInstanceName
!     type(ESMF_AttPack),      intent(inout),  optional :: attpack
!     type(ESMF_AttNest_Flag), intent(in),     optional :: attnestflag
!     logical,                 intent(out),    optional :: isPresent
!     integer,                 intent(out),    optional :: rc
!
! !DESCRIPTION:
!     Get an ESMF Attribute package object.  See Section~\ref{sec:AttPacks}
!     for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [convention]
!           The convention of the Attribute package.
!     \item [purpose]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[attpack]}]
!           A handle to the Attribute package.
!     \item [{[attnestflag]}]
!           A flag to determine whether to descend the
!           Attribute hierarchy when searching for this Attribute package, the
!           default is {\tt ESMF\_ATTNEST\_ON}.  This flag is documented in
!           section \ref{const:attnest}.
!     \item [{[isPresent]}]
!           A logical flag to tell if this Attribute package is present or not.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLink - Link a Component Attribute hierarchy to that of a Component or State
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLink()
!      subroutine ESMF_CompAttLink(<object1>, <object2>, rc)
!
! !ARGUMENTS:
!      <object1>, see below for supported values
!      <object2>, see below for supported values
!      integer, intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Attach a {\tt CplComp}, {\tt GridComp}, or {\tt SciComp} Attribute
!     hierarchy to the
!     hierarchy of a {\tt CplComp}, {\tt GridComp}, {\tt SciComp}, or
!     {\tt State}.
!
!     Supported values for the <object1> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(inout) :: comp1
!     \item type(ESMF\_GridComp), intent(inout) :: comp1
!     \item type(ESMF\_SCiComp),  intent(inout) :: comp1
!     \end{description}
!
!     Supported values for the <object2> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(in) :: comp2
!     \item type(ESMF\_GridComp), intent(in) :: comp2
!     \item type(ESMF\_SciComp),  intent(in) :: comp2
!     \item type(ESMF\_State),    intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object1>]
!       The \textit{parent} object in the Attribute hierarchy link.
!     \item [<object2>]
!       The \textit{child} object in the Attribute hierarchy link.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLink - Link a State Attribute hierarchy with the hierarchy of an Array, ArrayBundle, Field, FieldBundle, or State
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLink()
!      subroutine ESMF_StateAttLink(state, <object>, rc)
!
! !ARGUMENTS:
!      type(ESMF_State), intent(inout)         :: state
!      <object>, see below for supported values
!      integer,          intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Attach a {\tt State} Attribute hierarchy to the hierarchy of
!     a {\tt Fieldbundle}, {\tt Field}, or another {\tt State}.
!
!     Supported values for the <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [state]
!       An {\tt ESMF\_State} object.
!     \item [<object>]
!       The object with which to link hierarchies.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLink - Link a FieldBundle and Field Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLink()
!      subroutine ESMF_FieldBundleAttLink(fieldbundle, field, rc)
!
! !ARGUMENTS:
!      type(ESMF_FieldBundle), intent(inout)         :: fieldbundle
!      type(ESMF_Field),       intent(in)            :: field
!      integer,                intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Attach a {\tt FieldBundle} Attribute hierarchy to the hierarchy of
!     a {\tt Field}.
!
!     The arguments are:
!     \begin{description}
!     \item [fieldbundle]
!       An {\tt ESMF\_FieldBundle} object.
!     \item [field]
!       An {\tt ESMF\_Field} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLink - Link a Field and Grid Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLink()
!      subroutine ESMF_FieldAttLink(field, grid, rc)
!
! !ARGUMENTS:
!      type(ESMF_Field), intent(inout)         :: field
!      type(ESMF_Grid),  intent(in)            :: grid
!      integer,          intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Attach a {\tt Field} Attribute hierarchy to the hierarchy of
!     a {\tt Grid}.
!
!     The arguments are:
!     \begin{description}
!     \item [field]
!       An {\tt ESMF\_Field} object.
!     \item [grid]
!       An {\tt ESMF\_Grid} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLink - Link an ArrayBundle and Array Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLink()
!      subroutine ESMF_ArrayBundleAttLink(arraybundle, array, rc)
!
! !ARGUMENTS:
!      type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
!      type(ESMF_Array),       intent(in)            :: array
!      integer,                intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Attach an {\tt ArrayBundle} Attribute hierarchy to the hierarchy of
!     an {\tt Array}.
!
!     The arguments are:
!     \begin{description}
!     \item [arraybundle]
!       An {\tt ESMF\_ArrayBundle} object.
!     \item [array]
!       An {\tt ESMF\_Array} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink a Component Attribute hierarchy from that of a Component or State
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLinkRemove()
!      subroutine ESMF_CompAttLinkRemove(<object1>, <object2>, rc)
!
! !ARGUMENTS:
!      <object1>, see below for supported values
!      <object2>, see below for supported values
!      integer, intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Unattach a {\tt CplComp}, {\tt GridComp}, or {\tt SciComp} Attribute
!     hierarchy from the hierarchy of a {\tt CplComp}, {\tt GridComp},
!     {\tt SciComp}, or {\tt State}.
!
!     Supported values for the <object1> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(inout) :: comp1
!     \item type(ESMF\_GridComp), intent(inout) :: comp1
!     \item type(ESMF\_SciComp),  intent(inout) :: comp1
!     \end{description}
!
!     Supported values for the <object2> are:
!     \begin{description}
!     \item type(ESMF\_CplComp),  intent(in) :: comp2
!     \item type(ESMF\_GridComp), intent(in) :: comp2
!     \item type(ESMF\_SciComp),  intent(in) :: comp2
!     \item type(ESMF\_State),    intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object1>]
!       The \textit{parent} object in the Attribute hierarchy link.
!     \item [<object2>]
!       The \textit{child} object in the Attribute hierarchy link.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink a State Attribute hierarchy from the hierarchy of an Array, ArrayBundle, Field, FieldBundle, or State
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLinkRemove()
!      subroutine ESMF_StateAttLinkRemove(state, <object>, rc)
!
! !ARGUMENTS:
!      type(ESMF_State), intent(inout)         :: state
!      <object>, see below for supported values
!      integer,          intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Unattach a {\tt State} Attribute hierarchy from the hierarchy of
!     a {\tt Fieldbundle}, {\tt Field}, or another {\tt State}.
!
!     Supported values for the <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [state]
!       An {\tt ESMF\_State} object.
!     \item [<object>]
!       The object with which to unlink hierarchies.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink a FieldBundle and Field Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLinkRemove()
!      subroutine ESMF_FieldBundleAttLinkRemove(fieldbundle, field, rc)
!
! !ARGUMENTS:
!      type(ESMF_FieldBundle), intent(inout)         :: fieldbundle
!      type(ESMF_Field),       intent(in)            :: field
!      integer,                intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Unattach a {\tt FieldBundle} Attribute hierarchy from the hierarchy of
!     a {\tt Field}.
!
!     The arguments are:
!     \begin{description}
!     \item [fieldbundle]
!       An {\tt ESMF\_FieldBundle} object.
!     \item [field]
!       An {\tt ESMF\_Field} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink a Field and Grid Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLinkRemove()
!      subroutine ESMF_FieldAttLinkRemove(field, grid, rc)
!
! !ARGUMENTS:
!      type(ESMF_Field), intent(inout)         :: field
!      type(ESMF_Grid),  intent(in)            :: grid
!      integer,          intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Unattach a {\tt Field} Attribute hierarchy from the hierarchy of
!     a {\tt Grid}.
!
!     The arguments are:
!     \begin{description}
!     \item [field]
!       An {\tt ESMF\_Field} object.
!     \item [grid]
!       An {\tt ESMF\_Grid} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink an ArrayBundle and Array Attribute hierarchy
!
! !INTERFACE:
!      ! Private name; call using ESMF_AttributeLinkRemove()
!      subroutine ESMF_ArrayBundleAttLinkRemove(arraybundle, array, rc)
!
! !ARGUMENTS:
!      type(ESMF_ArrayBundle), intent(inout)         :: arraybundle
!      type(ESMF_Array),       intent(in)            :: array
!      integer,                intent(out), optional :: rc
!
!
! !DESCRIPTION:
!     Unattach an {\tt ArrayBundle} Attribute hierarchy from the hierarchy of
!     an {\tt Array}.
!
!     The arguments are:
!     \begin{description}
!     \item [arraybundle]
!       An {\tt ESMF\_ArrayBundle} object.
!     \item [array]
!       An {\tt ESMF\_Array} object.
!     \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeRead  - Read Attributes from an XML file
! \label{api:AttributeRead}
!
! !INTERFACE:
!     subroutine ESMF_AttributeRead(<object>, fileName, schemaFileName, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *), intent(in),  optional :: fileName
!     character (len = *), intent(in),  optional :: schemaFileName
!     integer,             intent(out), optional :: rc
!
! !DESCRIPTION:
!     Read Attributes for <object> from fileName, whose format is XML.
!     schemaFileName format is XSD.  If present, the schemaFileName is used to
!     validate the contents of fileName.  schemaFileName must be specified for
!     a fileName containing custom, user-defined Attributes.
!
!     Requires the third party Xerces C++ XML Parser library to be installed,
!     v3.1.0 or better.  For more details, see the "ESMF Users Guide",
!     "Building and Installing the ESMF, Third Party Libraries, Xerces" and
!     the website
!     \newline
!     "http://xerces.apache.org/xerces-c".  Also please see the
!     section on Attribute I/O,~\ref{io:attributeio}.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array       ! not yet implemented
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arrayBundle ! not yet implemented
!     \item type(ESMF\_CplComp),     intent(inout) :: cplComp
!     \item type(ESMF\_GridComp),    intent(inout) :: gridComp
!     \item type(ESMF\_SciComp),     intent(inout) :: gridComp
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle ! not yet implemented
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_DistGrid),    intent(inout) :: distGrid    ! not yet implemented
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           The {\tt ESMF} object onto which the read Attributes will be placed.
!     \item [{[fileName]}]
!           The name of the XML file to read.
!     \item [{[schemaFileName]}]
!           The name of the XSD file to validate the contents of fileName.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeRemove - Remove an Attribute or Attribute package using an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeRemove(<object>, keywordEnforcer, name, &
!       attpack, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     character (len = *),  intent(in),  optional :: name
!     type(ESMF_AttPack),   intent(inout)         :: attpack
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Remove an Attribute, or Attribute package on <object>.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages
!     and their conventions, purposes, and object types.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [{[name]}]
!           The name of the Attribute to remove.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!     NOTE:  An entire Attribute package can be removed by specifying
!            {\tt attpack} only, without {\tt name}.  By specifying
!            {\tt attpack} an Attribute will be removed
!            from the corresponding Attribute package, if it exists.  An
!            Attribute can be removed directly from <object> by specifying
!            {\tt name}, without {\tt attpack}.
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeRemove - Remove an Attribute or Attribute package
!
! !INTERFACE:
!     subroutine ESMF_AttributeRemove(<object>, name, convention, purpose, &
!       attPackInstanceName, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in),  optional :: name
!     character (len = *),  intent(in),  optional :: convention
!     character (len = *),  intent(in),  optional :: purpose
!     character (len = *),  intent(in),  optional :: attPackInstanceName
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Remove an Attribute, or Attribute package on <object>.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages
!     and their conventions, purposes, and object types.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [{[name]}]
!           The name of the Attribute to remove.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!     NOTE:  An entire Attribute package can be removed by specifying
!            {\tt convention}, {\tt purpose}, and {\tt attPackInstanceName}
!            only, without {\tt name}. An
!            Attribute can be removed directly from <object> by specifying
!            {\tt name}, without {\tt convention}, {\tt purpose}, and 
!            {\tt attPackInstanceName}.
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute in an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <value>, attpack, &
!       keywordEnforcer, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <value>, see below for supported values
!     type(ESMF_AttPack),   intent(inout)         :: attpack
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and {\tt value},
!     and, if in an Attribute package, a {\tt attpack}.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     Supported values for the <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in) :: value
!     \item integer(ESMF\_KIND\_I8), intent(in) :: value
!     \item real (ESMF\_KIND\_R4),   intent(in) :: value
!     \item real (ESMF\_KIND\_R8),   intent(in) :: value
!     \item logical,                 intent(in) :: value
!     \item character (len = *),     intent(in) :: value
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<value argument>]
!           The value of the Attribute to set.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute to point to internal class information in an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <value>,  attpack, &
!       keywordEnforcer, inputList, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <value>, see below for supported values
!     type(ESMF_AttPack),   intent(inout)         :: attpack
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     character (len = *),  intent(in),  optional :: inputList(:)
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and {\tt value},
!     and, if in an Attribute package, a {\tt attpack}.
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.  
!     The Attribute can
!     also be set to be a pointer to internal class information.  See Section
!     \ref{sec:InternalInfo} for a description of this capability.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid), intent(inout) :: grid
!     \end{description}
!
!     Supported values for the <value> are:
!     \begin{description}
!     \item character (len = *), intent(in), :: value
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<value argument>]
!           The value of the Attribute to set.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [{[inputList]}]
!           A list of the input parameters required to set internal info.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute in an ESMF_AttPack 
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <valueList>, attpack, &
!       keywordEnforcer, itemCount, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <valueList>, see below for supported values
!     type(ESMF_AttPack),   intent(in)            :: attpack
!type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below
!     integer,              intent(in),  optional :: itemCount
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and a
!     {\tt valueList}, with an {\tt itemCount}, and, if in an Attribute
!     package, a {\tt attpack}.  See Section~\ref{sec:AttPacks} for a
!     description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     Supported values for the <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in) :: valueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(in) :: valueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(in) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in) :: valueList(:)
!     \item logical,                 intent(in) :: valueList(:)
!     \item character (len = *),     intent(in) :: valueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<valueList argument>]
!           The valueList of the Attribute to set.
!     \item [attpack]
!           A handle to the Attribute package.
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <value>, &
!       convention, purpose, attPackInstanceName, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <value>, see below for supported values
!     character (len = *),  intent(in),  optional :: convention
!     character (len = *),  intent(in),  optional :: purpose
!     character (len = *),  intent(in),  optional :: attPackInstanceName
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and {\tt value},
!     and, if in an Attribute package, {\tt convention}, {\tt purpose}, and 
!     {\tt attPackInstanceName}.  
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     Supported values for the <value> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in) :: value
!     \item integer(ESMF\_KIND\_I8), intent(in) :: value
!     \item real (ESMF\_KIND\_R4),   intent(in) :: value
!     \item real (ESMF\_KIND\_R8),   intent(in) :: value
!     \item logical,                 intent(in) :: value
!     \item character (len = *),     intent(in) :: value
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<value argument>]
!           The value of the Attribute to set.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance. (Not implemented yet)
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute to point to internal class information
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <value>, inputList, 
!       convention, purpose, attPackInstanceName, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <value>, see below for supported values
!     character (len = *),  intent(in),  optional :: inputList(:)
!     character (len = *),  intent(in),  optional :: convention
!     character (len = *),  intent(in),  optional :: purpose
!     character (len = *),  intent(in),  optional :: attPackInstanceName
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and {\tt value},
!     and, if in an Attribute package, {\tt convention}, {\tt purpose}, and 
!     {\tt attPackInstanceName}.  
!     See Section~\ref{sec:AttPacks} for a description of Attribute packages.  
!     The Attribute can
!     also be set to be a pointer to internal class information.  See Section
!     \ref{sec:InternalInfo} for a description of this capability.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Grid), intent(inout) :: grid
!     \end{description}
!
!     Supported values for the <value> are:
!     \begin{description}
!     \item character (len = *), intent(in), :: value
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<value argument>]
!           The value of the Attribute to set.
!     \item [{[inputList]}]
!           A list of the input parameters required to set internal info.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance. (Not implemented yet)
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeSet - Set an Attribute
!
! !INTERFACE:
!     subroutine ESMF_AttributeSet(<object>, name, <valueList>, &
!       convention, purpose, attPackInstanceName, itemCount, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),  intent(in)            :: name
!     <valueList>, see below for supported values
!     character (len = *),  intent(in),  optional :: convention
!     character (len = *),  intent(in),  optional :: purpose
!     character (len = *),  intent(in),  optional :: attPackInstanceName
!     integer,              intent(in),  optional :: itemCount
!     integer,              intent(out), optional :: rc
!
! !DESCRIPTION:
!     Attach an Attribute to <object>, or set an Attribute in an
!     Attribute package.  The Attribute has a {\tt name} and a
!     {\tt valueList}, with an {\tt itemCount}, and, if in an Attribute
!     package, {\tt convention}, {\tt purpose}, and {\tt attPackInstanceName}.  
!     See Section~\ref{sec:AttPacks} for a
!     description of Attribute packages.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_DistGrid),    intent(inout) :: distgrid
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(inout) :: grid
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     Supported values for the <valueList> are:
!     \begin{description}
!     \item integer(ESMF\_KIND\_I4), intent(in) :: valueList(:)
!     \item integer(ESMF\_KIND\_I8), intent(in) :: valueList(:)
!     \item real (ESMF\_KIND\_R4),   intent(in) :: valueList(:)
!     \item real (ESMF\_KIND\_R8),   intent(in) :: valueList(:)
!     \item logical,                 intent(in) :: valueList(:)
!     \item character (len = *),     intent(in) :: valueList(:)
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [name]
!           The name of the Attribute to set.
!     \item [<valueList argument>]
!           The valueList of the Attribute to set.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attPackInstanceName]}]
!           The name of an Attribute package instance, specifying which one
!           of multiple Attribute package instances of the same convention
!           and purpose, within a nest.  If not specified, defaults to the
!           first instance. (Not implemented yet)
!     \item [{[itemCount]}]
!           The number of items in a multi-valued Attribute.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeUpdate  - Update an Attribute hierarchy
!
! !INTERFACE:
!     subroutine ESMF_AttributeUpdate(<object>, vm, rootList, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     type(ESMF_VM), intent(in)            :: vm
!     integer,       intent(in)            :: rootList(:)
!     integer,       intent(out), optional :: rc
!
! !DESCRIPTION:
!     Update an Attribute hierarchy during runtime.  This call will not work
!     if changes have been made to the underlying object hierarchy and
!     ESMF\_StateReconcile() has not already been called.  There is a check
!     that will fail if this case is encountered.  The information from
!     the PETs in the 'rootList' is transferred to the PETs that are not
!     in the 'rootList'.  Care should be taken to ensure that the information
!     contained in the Attributes on the PETs in the 'rootList' is consistent.
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(inout) :: array
!     \item type(ESMF\_ArrayBundle), intent(inout) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(inout) :: comp
!     \item type(ESMF\_GridComp),    intent(inout) :: comp
!     \item type(ESMF\_SciComp),     intent(inout) :: comp
!     \item type(ESMF\_Field),       intent(inout) :: field
!     \item type(ESMF\_FieldBundle), intent(inout) :: fieldbundle
!     \item type(ESMF\_State),       intent(inout) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [vm]
!           The virtural machine over which this Attribute hierarchy
!           should be updated.
!     \item [rootList]
!           The list of \textit{root} PETs that are to be used to update.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!
!EOP
!------------------------------------------------------------------------------
!BOP
! !IROUTINE: ESMF_AttributeWrite  - Write an Attribute package
! \label{api:AttributeWrite}
!
! !INTERFACE:
!     subroutine ESMF_AttributeWrite(<object>, convention, purpose, &
!       attwriteflag, rc)
!
! !ARGUMENTS:
!     <object>, see below for supported values
!     character (len = *),     intent(in),  optional :: convention
!     character (len = *),     intent(in),  optional :: purpose
!     type(ESMF_AttWriteFlag), intent(in),  optional :: attwriteflag
!     integer,                 intent(out), optional :: rc
!
! !DESCRIPTION:
!     Write the Attribute package for <object>.  The Attribute package defines
!     the convention, purpose, and object type of the associated Attributes.  Either
!     tab-delimited or xml format is achieved by using {\tt attwriteflag}.
!     Currently, only ESMF/ESG/CF Field Attribute packages can be written in
!     tab-delimited format.  See Section~\ref{sec:AttPacks} for a description
!     of Attribute packages and their conventions, purposes, and object types.
!
!     This call is collective across the current VM.
!
!     Writing Attribute XML files is performed with the standard C++ output
!     file stream facility.
!
!     Note:  For an object type of {\tt ESMF\_GridComp}, convention='WaterML',
!     purpose='TimeSeries', and
!     \newline
!     attwriteflag=ESMF\_ATTWRITE\_XML, an XML file
!     conforming to a hydrologic standard called WaterML will be written.  See
!     the following for more information:
!
!     \begin{description}
!     \item{"http://his.cuahsi.org/wofws.html"}
!     \item{"http://www.earthsystemcurator.org/projects/waterml.shtml"}
!     \end{description}
!
!     An ESMF Use Test Case is available which showcases an example of how
!     to write a WaterML file; please see
!
!     \begin{description}
!     \item{"http://esmf.cvs.sourceforge.net/viewvc/esmf/use\_test\_cases/ESMF\_WaterML"}
!     \item{"http://esmf.cvs.sourceforge.net/viewvc/esmf/use\_test\_cases/README"}
!     \end{description}
!
!     Supported values for <object> are:
!     \begin{description}
!     \item type(ESMF\_Array),       intent(in) :: array
!     \item type(ESMF\_ArrayBundle), intent(in) :: arraybundle
!     \item type(ESMF\_CplComp),     intent(in) :: comp
!     \item type(ESMF\_GridComp),    intent(in) :: comp
!     \item type(ESMF\_SciComp),     intent(in) :: comp
!     \item type(ESMF\_DistGrid),    intent(in) :: distgrid
!     \item type(ESMF\_Field),       intent(in) :: field
!     \item type(ESMF\_FieldBundle), intent(in) :: fieldbundle
!     \item type(ESMF\_Grid),        intent(in) :: grid
!     \item type(ESMF\_State),       intent(in) :: state
!     \end{description}
!
!     The arguments are:
!     \begin{description}
!     \item [<object>]
!           An {\tt ESMF} object.
!     \item [{[convention]}]
!           The convention of the Attribute package.
!     \item [{[purpose]}]
!           The purpose of the Attribute package.
!     \item [{[attwriteflag]}]
!           The flag to specify which format is desired for the write, the
!           default is ESMF\_ATTWRITE\_TAB.  This flag is documented in
!           section \ref{const:attwrite}.
!     \item [{[rc]}]
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!     \end{description}
!
!EOP
!------------------------------------------------------------------------------

    function ESMF_AttributeGetInit(attpack)
      type(ESMF_AttPack), intent(in), optional :: attpack
      ESMF_INIT_TYPE :: ESMF_AttributeGetInit
    
      if (present(attpack)) then
          ESMF_AttributeGetInit=ESMF_INIT_GET(attpack)
      else
          ESMF_AttributeGetInit=ESMF_INIT_CREATED
      endif
    
    end function ESMF_AttributeGetInit

!-----------------------------------------------------------------------------

!-------------------------------------------------------------------------
!  Macro versions of the routines
!-------------------------------------------------------------------------

#undef  ESMF_METHOD
#define AttGetAttPackMacro(mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetAttPack" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGetAttPack - Retrieve a handle to an Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGetAttPack() @\
      subroutine mclass##AttGetAttPack(mthis, & @\
        convention, purpose, keywordEnforcer, attPackInstanceName, & @\
        attpack, attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [convention] @\
!           The convention of the Attribute package. @\
!     \item [purpose] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  @\
!     \item [{[attpack]}] @\
!           The Attribute package to return. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute package, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute package is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, count @\
      type(ESMF_Logical) :: lisPresent @\
      character(len=*), parameter :: object=#mthis @\
      type(ESMF_AttPack) :: lattpack @\
      character(len=max(len(convention), len(purpose))), dimension(3) :: specList @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
      count = 3 @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      ! guard against a situation which cannot be prevented with the use of optional arguments @\
      if (present(attpackInstanceName)) then @\
        if (len(attpackInstanceName) > max(len(convention), len(purpose))) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
            msg="TODO: initialize the specList with length dependent on attpackInstanceName", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      ! make specList out of convention and purpose @\
      specList(1) = trim(convention) @\
      specList(2) = trim(purpose) @\
      if (present(attpackInstanceName)) then @\
        specList(3) = trim(attpackInstanceName) @\
        count = 4 @\
      else @\
        specList(3) = "" @\
      endif @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackGet(mthisfield, lattpack, & @\
                             count, specString, lens, & @\
                             lattnestflag, lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if (present(attpack)) then @\
        attpack = lattpack @\
 @\
        ! set the created macro @\
        ESMF_INIT_SET_CREATED(attpack) @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAttPack @\
!------------------------------------------------------------------------------

#undef  ESMF_METHOD
#define AttGetAttPackMacroSL(mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetAttPackSL" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGetAttPack - Retrieve a handle to an Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGetAttPack() @\
      subroutine mclass##AttGetAttPackSL(mthis, & @\
        specList, keywordEnforcer, & @\
        attpack, attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), dimension(:), intent(in) :: specList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [specList] @\
!           A character list of values which identify the Attribute package, such as @\
!           convention, purpose, and instancename. @\
!     \item [{[attpack]}] @\
!           The Attribute package to return. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute package, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute package is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j @\
      type(ESMF_Logical) :: lisPresent @\
      character(len=*), parameter :: object=#mthis @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
      type(ESMF_AttPack) :: lattpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      ! verify that the specList has some minimum requirements @\
      if (size(specList) < 2) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList must contain at least two specifying pieces of information", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      elseif (size(specList) > 3) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList can only contain convention, purpose, and attpackinstance name for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      if (size(specList) > 4) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList can only contain convention, purpose, and attpackinstance name for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      call c_ESMC_AttPackGet(mthisfield, lattpack, & @\
                             size(lens), specString, lens, & @\
                             lattnestflag, lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if (present(attpack)) then @\
        attpack = lattpack @\
 @\
        ! set the created macro @\
        ESMF_INIT_SET_CREATED(attpack) @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAttPackSL @\

!------------------------------------------------------------------------------

#define AttAddPackStandardMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackStd" @\
 @\
!BOPI @\
! !IROUTINE: AttAddPackStd - Add an ESMF standard Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackStd(mthis, convention, purpose, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add an ESMF standard Attribute package @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An {\tt mclass} object. @\
!     \item [convention] @\
!      The convention of the new Attribute package. @\
!     \item [purpose] @\
!      The purpose of the new Attribute package. @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j                           ! Error status @\
      character (len=*), parameter :: object=#mthis @\
      character(len=max(len(convention), len(purpose))), dimension(2) :: specList @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (.not.((convention.eq."ESG" .and.purpose.eq."General").or. & @\
                (convention.eq."ESMF".and.purpose.eq."General").or. & @\
                (convention.eq."CF".and.purpose.eq."General").or. & @\
                (convention.eq."CF".and.purpose.eq."Extended").or. & @\
                (convention.eq."CIM 1.5.1".and.purpose.eq."grids").or. & @\
                (convention.eq."CIM 1.7.1".and.purpose.eq."grids").or. & @\
                (convention.eq."CIM 1.5".and.purpose.eq."ModelComp").or. & @\
                (convention.eq."CIM 1.5.1".and.purpose.eq."ModelComp").or. & @\
                (convention.eq."CIM 1.7.1".and.purpose.eq."ModelComp").or. & @\
                (convention.eq."CIM 1.5".and.purpose.eq."Inputs").or. & @\
                (convention.eq."CIM 1.5.1".and.purpose.eq."Inputs").or. & @\
                (convention.eq."CIM 1.7.1".and.purpose.eq."Inputs"))) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="See ESMF Reference Manual for ESMF standard Attribute package convention and purpose values", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! make specList out of convention and purpose @\
      specList(1) = trim(convention) @\
      specList(2) = trim(purpose) @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackCreateStandard(mthisfield, & @\
        size(lens), specString, lens, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if ( present(attpack) ) then @\
        ! retrieve the optional attribute package handle @\
        call mclass##AttGetAttPackSL(mthis, & @\
                                     specList, & @\
                                     attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackStd

!------------------------------------------------------------------------------

#define AttAddPackStandardMacroSL(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackStdSL" @\
 @\
!BOPI @\
! !IROUTINE: AttAddPackStdSL - Add an ESMF standard Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackStdSL(mthis, specList, keywordEnforcer, & @\
        attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len = *), dimension(:), intent(in) :: specList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add an ESMF standard Attribute package @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An {\tt mclass} object. @\
!     \item [specList] @\
!      A character list of values which identify the Attribute package, such as @\
!      convention, purpose, and instancename. @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j                           ! Error status @\
      character (len=*), parameter :: object=#mthis @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      ! verify that the specList has some minimum requirements @\
      if (size(specList) < 2) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList must contain at least two specifying pieces of information", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      elseif (size(specList) > 3) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList can only contain convention, purpose, and attpackinstance name for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (.not.((specList(1).eq."ESG"      .and.specList(2).eq."General").or. & @\
                (specList(1).eq."ESMF"     .and.specList(2).eq."General").or. & @\
                (specList(1).eq."CF"       .and.specList(2).eq."General").or. & @\
                (specList(1).eq."CF"       .and.specList(2).eq."Extended").or. & @\
                (specList(1).eq."CIM 1.5.1".and.specList(2).eq."grids").or. & @\
                (specList(1).eq."CIM 1.7.1".and.specList(2).eq."grids").or. & @\
                (specList(1).eq."CIM 1.5"  .and.specList(2).eq."ModelComp").or. & @\
                (specList(1).eq."CIM 1.5.1"  .and.specList(2).eq."ModelComp").or. & @\
                (specList(1).eq."CIM 1.7.1"  .and.specList(2).eq."ModelComp").or. & @\
                (specList(1).eq."CIM 1.5"  .and.specList(2).eq."Inputs").or. & @\
                (specList(1).eq."CIM 1.5.1"  .and.specList(2).eq."Inputs").or. & @\
                (specList(1).eq."CIM 1.7.1"  .and.specList(2).eq."Inputs"))) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="See ESMF Reference Manual for ESMF standard Attribute packages", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      ! create the attribute package @\
      call c_ESMC_AttPackCreateStandard(mthisfield, & @\
        size(lens), specString, lens, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! retrieve the optional attribute package handle @\
      if (present(attpack)) then @\
 @\
        call mclass##AttGetAttPackSL(mthis, specList, attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackStdSL

!------------------------------------------------------------------------------

#define AttAddPackStandardNMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackStdN" @\
 @\
!BOPI @\
! !IROUTINE: AttAddPackStdN - Add an ESMF standard Attribute package with nested standard Attribute packages @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackStdN(mthis, convention, purpose, & @\
        nestConvention, nestPurpose, nestAttPackInstanceCountList, & @\
        nestAttPackInstanceNameList, nestCount, & @\
        nestAttPackInstanceNameCount, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      character (len = *), dimension(:), intent(in) :: nestConvention @\
      character (len = *), dimension(:), intent(in) :: nestPurpose @\
      integer, dimension(:), intent(in) :: nestAttPackInstanceCountList @\
      character (len = *), dimension(:), intent(out) :: nestAttPackInstanceNameList @\
      integer, intent(in), optional :: nestCount @\
      integer, intent(out), optional :: nestAttPackInstanceNameCount @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Add an ESMF standard Attribute package which contains a user-specified @\
!     number of nested standard Attribute packages.  ESMF generates and @\
!     returns default instance names for the nested Attribute packages.  @\
!     These names can be used later to distinguish among multiple nested @\
!     Attribute packages of the same type in calls to @\
!     {\tt ESMF\_AttributeGet()}, {\tt ESMF\_AttributeSet()}, and @\
!     {\tt ESMF\_AttributeRemove()}.  See Section~\ref{sec:AttPacks} for a @\
!     description of Attribute packages and their conventions, purposes, @\
!     and object types. @\
! @\
!     Add an ESMF standard Attribute package which contains a user-specified @\
!     number of nested standard Attribute packages.  The user specifies the @\
!     names of the nested Attribute package instances (not yet implemented), @\
!     or ESMF generates and returns default instance names. These names can @\
!     be used later to distinguish among multiple nested Attribute packages @\
!     of the same type in calls to {\tt ESMF\_AttributeGet()}, @\
!     {\tt ESMF\_AttributeSet()}, and {\tt ESMF\_AttributeRemove()}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [attpack] @\
!      The Attribute package to be created. @\
!     \item [convention] @\
!      The convention of the new Attribute package. @\
!     \item [purpose] @\
!      The purpose of the new Attribute package. @\
!     \item [nestConvention] @\
!      The convention(s) of the standard Attribute package type(s) around @\
!      which to nest the new Attribute package. @\
!     \item [nestPurpose] @\
!      The purpose(s) of the standard Attribute package type(s) around @\
!      which to nest the new Attribute package. @\
!     \item [nestAttPackInstanceCountList] @\
!      The desired number of nested Attribute package instances for each @\
!      nested (nestConvention, nestPurpose) package type. Note: if only one @\
!      of each nested package type is desired, then the @\
!      {\tt ESMF\_AttributeAdd()} overloaded method @\
!      {\tt ESMF\_AttAddPackStd()} should be used. @\
!     \item [nestAttPackInstanceNameList] @\
!      The name(s) of the nested Attribute package instances, generated @\
!      by ESMF, used to distinguish between multiple instances of the @\
!      same convention and purpose. @\
!     \item [{[nestCount]}] @\
!      The count of the number of nested Attribute package types to add to @\
!      the new Attribute package. @\
!     \item [{[nestAttPackInstanceNameCount]}] @\
!      The number of nested Attribute package instance names. @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, k @\
      integer :: localNestCount, localNestAPinstNameSize, totalInstances @\
      integer :: localNestAPinstNameCount @\
      character(len=*), parameter :: object=#mthis @\
      integer, dimension(size(nestConvention)) :: nestConvLens @\
      integer, dimension(size(nestPurpose)) :: nestPurpLens @\
      character(len=(size(nestConvention)*len(nestConvention))) :: nestConvString @\
      character(len=(size(nestPurpose)*len(nestPurpose))) :: nestPurpString @\
      integer, dimension(size(nestAttPackInstanceNameList)) :: nestAPinstNameLens @\
      character(len=(size(nestAttPackInstanceNameList)*len(nestAttPackInstanceNameList))) :: nestAPinstNameString @\
      character(len=max(len(convention), len(purpose))), dimension(2) :: specList @\
@\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      ! TODO: check if (convention, purpose) is standard attpack type @\
      !       if so, then check if (nestConvention, nestPurpose) are standard @\
      !       children of the parent @\
 @\
      if (size(nestConvention).ne.size(nestPurpose)) then @\
         call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
           msg="number of items in nestConvention and nestPurpose must be the same", & @\
           ESMF_CONTEXT, rcToReturn=rc) @\
         return @\
      endif @\
 @\
      if (size(nestAttPackInstanceCountList).ne.size(nestConvention)) then @\
         call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
           msg="number of items in nestAttPackInstanceCountList and nestConvention must be the same", & @\
           ESMF_CONTEXT, rcToReturn=rc) @\
         return @\
      endif @\
 @\
      if (present(nestCount)) then @\
        if (nestCount > size(nestConvention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="nestCount cannot be larger than size(nestConvention)", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        localNestCount = nestCount @\
      else @\
        localNestCount = size(nestConvention) @\
      end if @\
      if (localNestCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                   msg="size(nestConvention) and size(nestPurpose) or nestCount are <= 0", & @\
                    ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! pack conv,purp strings and lengths, add up instances @\
      j = 1 @\
      k = 1 @\
      totalInstances = 0 @\
      do  i=1,localNestCount @\
        nestConvLens(i) = len_trim(nestConvention(i)) @\
        nestPurpLens(i) = len_trim(nestPurpose(i)) @\
        nestConvString(j:(j+nestConvLens(i)-1)) = nestConvention(i) @\
        nestPurpString(k:(k+nestPurpLens(i)-1)) = nestPurpose(i) @\
        j = j + nestConvLens(i) @\
        k = k + nestPurpLens(i) @\
        totalInstances = totalInstances + nestAttPackInstanceCountList(i) @\
      enddo @\
 @\
      if (totalInstances.gt.size(nestAttPackInstanceNameList)) then @\
         call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
           msg="size(nestAttPackInstanceNameList) not big enough for the number of instances specified in nestAttPackInstanceCountList", & @\
           ESMF_CONTEXT, rcToReturn=rc) @\
         return @\
      endif @\
 @\
      ! pack widths of NameList elements @\
      ! TODO: pack actual lengths (len_trim) when implementing name input @\
      localNestAPinstNameSize = size(nestAttPackInstanceNameList) @\
      do  i=1,localNestAPinstNameSize @\
        nestAPinstNameLens(i) = len(nestAttPackInstanceNameList(i)) @\
      enddo @\
 @\
      call c_ESMC_AttPackCreateStdNest(mthisfield, convention, & @\
        purpose, object, nestConvString, nestPurpString, & @\
        nestConvLens, nestPurpLens, nestAttPackInstanceCountList, & @\
        localNestCount, & @\
        nestAPinstNameString, nestAPinstNameLens, localNestAPinstNameSize, & @\
        localNestAPinstNameCount, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! unpack returned attpack instance names @\
      j = 1 @\
      do  i=1,localNestAPinstNameCount @\
        nestAttPackInstanceNameList(i) = & @\
                       nestAPinstNameString(j:(j+nestAPinstNameLens(i)-1)) @\
        j = j + nestAPinstNameLens(i) @\
      enddo @\
 @\
      ! return number of attpack instance names @\
      if (present(nestAttPackInstanceNameCount)) then @\
        nestAttPackInstanceNameCount = localNestAPinstNameCount @\
      endif @\
 @\
      if ( present(attpack) ) then @\
        ! make specList out of convention and purpose @\
        specList(1) = trim(convention) @\
        specList(2) = trim(purpose) @\
 @\
        ! retrieve the optional attribute package handle @\
        call mclass##AttGetAttPackSL(mthis, & @\
                                     specList, & @\
                                     attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackStdN

!------------------------------------------------------------------------------

#define AttAddPackCustomMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackCst" @\
!BOPI @\
! !IROUTINE: AttAddPackCst - Add a custom Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackCst(mthis, convention, purpose, attrList, & @\
        count, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      character (len = *), dimension(:), intent(in) :: attrList @\
      integer, intent(in), optional :: count @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add a custom Attribute package for the object, or modify an existing @\
!     Attribute package. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [convention] @\
!      The convention of the new Attribute package. @\
!     \item [purpose] @\
!      The purpose of the new Attribute package. @\
!     \item [attrList] @\
!      An array of character strings specifying the names of the user defined Attributes @\
!     \item [{[count]}] @\
!      The count of the number of Attributes to add to the package @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, localCount @\
      character(len=*), parameter :: object=#mthis @\
      character(len=max(len(convention), len(purpose))), dimension(2) :: specList @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(count)) then @\
        if (count > size(attrList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="count cannot be larger than size(attrList)", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        if (count .le. 0) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="count is <= 0", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        localCount = count @\
      else @\
        localCount = size(attrList) @\
      end if @\
 @\
      ! make specList out of convention and purpose @\
      specList(1) = trim(convention) @\
      specList(2) = trim(purpose) @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackCreateCustom(mthisfield, & @\
        size(lens), specString, lens, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      do i = 1, localCount @\
        call c_ESMC_AttPackAddAttribute(mthisfield, attrList(i), & @\
          size(lens), specString, lens, localrc) @\
      end do @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if ( present(attpack) ) then @\
        ! retrieve the optional attribute package handle @\
        call mclass##AttGetAttPackSL(mthis, & @\
                                     specList, & @\
                                     attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackCst

!------------------------------------------------------------------------------

#define AttAddPackCustomMacroSL(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackCstSL" @\
!BOPI @\
! !IROUTINE: AttAddPackCstSL - Add a custom Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackCstSL(mthis, specList, attrList, & @\
        keywordEnforcer, count, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), dimension(:), intent(in) :: specList @\
      character (len = *), dimension(:), intent(in) :: attrList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      integer, intent(in), optional :: count @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add a custom Attribute package for the object, or modify an existing @\
!     Attribute package. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [specList] @\
!      A character list of values which identify the Attribute package, such as @\
!      convention, purpose, and instancename. @\
!     \item [attrList] @\
!      An array of character strings specifying the names of the user defined Attributes @\
!     \item [{[count]}] @\
!      The count of the number of Attributes to add to the package @\
!      convention, purpose, and instancename. @\
!     \item [{[attpack}]] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, localCount @\
      character(len=*), parameter :: object=#mthis @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      ! verify that the count and number of attribute names are reasonable @\
      if (present(count)) then @\
        if (count > size(attrList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="count cannot be larger than size(attrList)", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        if (count .le. 0) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="count is <= 0", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        localCount = count @\
      else @\
        localCount = size(attrList) @\
      end if @\
 @\
      ! verify that the specList has some minimum requirements @\
      if (size(specList) < 2) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList must contain at least two specifying pieces of information", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      elseif (size(specList) > 3) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_WRONG, & @\
          msg="specList can only contain convention, purpose, and attpackinstance name for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      ! create the attribute package @\
      call c_ESMC_AttPackCreateCustom(mthisfield, & @\
        size(lens), specString, lens, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! add attributes to the package @\
      do i = 1, localCount @\
        call c_ESMC_AttPackAddAttribute(mthisfield, attrList(i), & @\
          size(lens), specString, lens, localrc) @\
      end do @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! retrieve the optional attribute package handle @\
      if (present(attpack)) then @\
 @\
        call mclass##AttGetAttPackSL(mthis, specList, attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackCstSL

!------------------------------------------------------------------------------

#define AttAddPackCustomNMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackCstN" @\
!BOPI @\
! !IROUTINE: AttAddPackCstN - Add a custom Attribute package with nested Attribute Packages @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackCstN(mthis, convention, purpose, & @\
        attrList, count, nestConvention, nestPurpose, nestCount, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      character (len = *), dimension(:), intent(in), optional :: attrList @\
      integer, intent(in), optional :: count @\
      character (len = *), dimension(:), intent(in) :: nestConvention @\
      character (len = *), dimension(:), intent(in) :: nestPurpose @\
      integer, intent(in), optional :: nestCount @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add a custom Attribute package for the object, with one or more nested @\
!     Attribute packages, or modify an existing Attribute package. @\
!     Allows for building full multiple-child Attribute hierarchies @\
!     (multi-child trees). @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [convention] @\
!      The convention of the new Attribute package. @\
!     \item [purpose] @\
!      The purpose of the new Attribute package. @\
!     \item [{[attrList]}] @\
!      An array of character strings specifying the names of the user defined Attributes @\
!     \item [{[count]}] @\
!      The count of the number of Attributes to add to the package @\
!     \item [nestConvention] @\
!      The convention(s) of the Attribute package(s) around which to nest the @\
!      new Attribute package. @\
!     \item [nestPurpose] @\
!      The purpose(s) of the Attribute package(s) around which to nest the @\
!      new Attribute package. @\
!     \item [{[nestCount]}] @\
!      The count of the number of nested Attribute packages to add to the @\
!      new Attribute package @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, k, localCount, localNestCount @\
      character(len=*), parameter :: object=#mthis @\
      integer, dimension(size(nestConvention)) :: nestConvLens @\
      integer, dimension(size(nestPurpose)) :: nestPurpLens @\
      character(len=(size(nestConvention)*len(nestConvention))) :: nestConvString @\
      character(len=(size(nestPurpose)*len(nestPurpose))) :: nestPurpString @\
      character(len=max(len(convention), len(purpose))), dimension(2) :: specList @\
      integer, dimension(size(specList)+1) :: lens @\
      character(len=(max(len(specList),len(object))*(size(specList)+1))) :: specString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      localCount = 0 @\
      if (present(attrList)) then @\
        if (present(count)) then @\
          if (count > size(attrList)) then @\
            call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
              msg="count cannot be larger than size(attrList)", & @\
              ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
          endif @\
          if (count .lt. 0) then @\
            call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
              msg="count is negative", & @\
              ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
          endif @\
          localCount = count @\
        else @\
          localCount = size(attrList) @\
        end if @\
      end if @\
 @\
      if (size(nestConvention).ne.size(nestPurpose)) then @\
         call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
           msg="number of items in nestConvention and nestPurpose must be the same", & @\
           ESMF_CONTEXT, rcToReturn=rc) @\
         return @\
      endif @\
 @\
      if (present(nestCount)) then @\
        if (nestCount > size(nestConvention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_SIZE, & @\
            msg="nestCount cannot be larger than size(nestConvention)", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        localNestCount = nestCount @\
      else @\
        localNestCount = size(nestConvention) @\
      end if @\
      if (localNestCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                   msg="size(nestConvention) and size(nestPurpose) or nestCount are <= 0", & @\
                    ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! make specList out of convention and purpose @\
      specList(1) = trim(convention) @\
      specList(2) = trim(purpose) @\
 @\
      ! collapse the specList into a string to pass down to the C glue layer @\
      i = 1 @\
      j = 1 @\
      lens(i) = len(object) @\
      specString(j:(j+lens(i)-1)) = object @\
      j = j+lens(i) @\
      do  i=2,(size(specList)+1) @\
        lens(i) = len_trim(specList(i-1)) @\
        specString(j:(j+lens(i)-1)) = trim(specList(i-1)) @\
        j = j + lens(i) @\
      enddo @\
 @\
      j = 1 @\
      k = 1 @\
      do  i=1,localNestCount @\
        nestConvLens(i) = len_trim(nestConvention(i)) @\
        nestPurpLens(i) = len_trim(nestPurpose(i)) @\
        nestConvString(j:(j+nestConvLens(i)-1)) = nestConvention(i) @\
        nestPurpString(k:(k+nestPurpLens(i)-1)) = nestPurpose(i) @\
        j = j + nestConvLens(i) @\
        k = k + nestPurpLens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackNest(mthisfield, size(lens), specString, lens, & @\
        localNestCount, nestConvString, nestPurpString, & @\
        nestConvLens, nestPurpLens, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (localCount .gt. 0) then @\
        do i = 1, localCount @\
          call c_ESMC_AttPackAddAttribute(mthisfield, attrList(i), & @\
            size(lens), specString, lens, localrc) @\
        end do @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if ( present(attpack) ) then @\
        ! retrieve the optional attribute package handle @\
        call mclass##AttGetAttPackSL(mthis, & @\
                                     specList, & @\
                                     attpack=attpack, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackCstN

!------------------------------------------------------------------------------

#define AttAddPackCustomN1Macro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttAddPackCstN1" @\
!BOPI @\
! !IROUTINE: AttAddPackCstN1 - Add a custom Attribute package with a single nested Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeAdd() @\
      subroutine mclass##AttAddPackCstN1(mthis, convention, purpose, attrList, & @\
        count, nestConvention, nestPurpose, attpack, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      character (len = *), dimension(:), intent(in), optional :: attrList @\
      integer, intent(in), optional :: count @\
      character (len = *), intent(in) :: nestConvention @\
      character (len = *), intent(in) :: nestPurpose @\
      type(ESMF_AttPack), intent(inout), optional :: attpack @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Add a custom Attribute package for the object, with a single @\
!     nested Attribute package, or modify an existing Attribute package. @\
!     Allows for building single-child Attribute hierarchies @\
!     (single-child trees). @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [convention] @\
!      The convention of the new Attribute package. @\
!     \item [purpose] @\
!      The purpose of the new Attribute package. @\
!     \item [{[attrList]}] @\
!      An array of character strings specifying the names of the user defined Attributes @\
!     \item [{[count]}] @\
!      The count of the number of Attributes to add to the package @\
!     \item [nestConventio] @\
!      The convention of the Attribute package around which to nest the @\
!      new Attribute package. @\
!     \item [nestPurpose] @\
!      The purpose of the Attribute package around which to nest the @\
!      new Attribute package. @\
!     \item [{[attpack]}] @\
!      An optional handle to the Attribute package that is to be created. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      character(len=len(nestConvention)), dimension(1) :: nestConvString @\
      character(len=len(nestPurpose)), dimension(1) :: nestPurpString @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      nestConvString(1) = nestConvention @\
      nestPurpString(1) = nestPurpose @\
 @\
      call mclass##AttAddPackCstN(mthis, & @\
                                  convention, purpose, & @\
                                  attrList, count, & @\
                                  nestConvString, nestPurpString, & @\
                                  nestCount=1, attpack=attpack, rc=localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttAddPackCstN1

!------------------------------------------------------------------------------

#define AttCopyMacro(mclass1, mclass2, mthis1, mthis2, mthisfield1, mthisfield2) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttributeCopy" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeCopy - Copy an Attribute hierarchy between objects @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeCopy() @\
      subroutine mclass1##AttCopy(mthis1, mthis2, copyflag, atttreeflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass1), intent(in) :: mthis1   @\
      type(mclass2), intent(inout) :: mthis2 @\
      type(ESMF_Copy_Flag), intent(in) :: copyflag @\
      type(ESMF_AttTreeFlag), intent(in) :: atttreeflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Copy all Attributes in one hierarchy to another. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt mclass1} object. @\
!     \item [mthis2] @\
!      An {\tt mclass2} object. @\
!     \item [copyflag] @\
!      A flag to determine if the copy is to be by reference, value, or both @\
!     \item [atttreeflag] @\
!      A flag to determine if the copy is supposed to descend the Attribute @\
!      hierarchy @\
!     \item [{[rc]}] @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass1##GetInit,mthis1,rc) @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass2##GetInit,mthis2,rc) @\
 @\
      call c_ESMC_AttributeCopy(mthisfield1, mthisfield2, & @\
                                copyflag, atttreeflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass1##AttCopy @\

!------------------------------------------------------------------------------

#define AttGetDoc() \
!BOPI @\
!EOPI @\

!------------------------------------------------------------------------------

#define AttGetBMacro(mtype, mtypekind, mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetAP##mtypekind(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, inputList, attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      mtype(ESMF_KIND_##mtypekind), intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      mtype(ESMF_KIND_##mtypekind), intent(in), optional :: defaultvalue @\
      character (len=*), intent(in), optional :: inputList(:) @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The real value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The real default value of the named Attribute. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to retrieve internal info. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc, i @\
      type(ESMF_Logical) :: lisPresent @\
      integer :: count @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          value=value, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                                   lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_##mtypekind, count, lattnestflag, & @\
          value, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
       endif @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
            msg="Attribute not found and default value not given", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAP##mtypekind @\
!------------------------------------------------------------------------------@\
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet##mtypekind(mthis, name, value, & @\
        defaultvalue, inputList, convention, purpose, attPackInstanceName, & @\
        attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), intent(out) :: value @\
      mtype(ESMF_KIND_##mtypekind), intent(in), optional :: defaultvalue @\
      character (len=*), intent(in), optional :: inputList(:) @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The real value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The real default value of the named Attribute. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to retrieve internal info. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc, i @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      integer :: count @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          value=value, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          if (present(rc)) rc = ESMF_SUCCESS @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                                     lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_##mtypekind, count, lattnestflag, value, localrc) @\
        endif @\
      else @\
       @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_##mtypekind, count, value, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
            msg="Attribute not found and default value not given", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet##mtypekind @\

!------------------------------------------------------------------------------

#define AttGet1DBMacro(mtype, mtypekind, mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet1DAP##mtypekind(mthis, name, attpack, & @\
        valueList, keywordEnforcer, defaultvalueList, inputList, & @\
        attnestflag, itemCount, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: inputList(:) @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount    @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The list of real values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The list of real default values of the named Attribute. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to retrieve internal info. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          valueList=valueList, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      litemcount = size(valueList) @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                       lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_##mtypekind, litemCount, lattnestflag, & @\
          valueList, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet1DAP##mtypekind @\
@\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet1D##mtypekind(mthis, name, valueList, & @\
        defaultvalueList, inputList, convention, purpose, & @\
        attPackInstanceName, attnestflag, itemCount, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(out) :: valueList @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: inputList(:) @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The list of real values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The list of real default values of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attpack]}] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          valueList=valueList, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      litemcount = size(valueList) @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_##mtypekind, litemcount, lattnestflag, valueList, & @\
            localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
           ESMF_TYPEKIND_##mtypekind, litemCount, valueList, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet1D##mtypekind @\

!------------------------------------------------------------------------------

#define AttGetLogicalBMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclAP(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      logical, intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      logical, intent(in), optional :: defaultvalue @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical Attribute from the {\tt array}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The logical value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, localvalue @\
      integer :: count @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
 @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                       lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_LOGICAL, count, lattnestflag, & @\
          localvalue, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        value = localvalue   @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgcl(mthis, name, value, defaultvalue, & @\
        convention, purpose, attPackInstanceName, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, intent(out) :: value @\
      logical, intent(in), optional :: defaultvalue @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical Attribute from the {\tt array}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The logical value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, isAttpack, localvalue @\
      integer :: count @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
 @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_LOGICAL, count, lattnestflag, localvalue, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          value = localvalue   @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_LOGICAL, count, localvalue, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          value = localvalue @\
        endif @\
      endif @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgcl @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical list Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclListAP(mthis, name, attpack, valueList, & @\
        keywordEnforcer, defaultvalueList, inputList, attnestflag, & @\
        itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      logical, dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      logical, dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: inputList(:) @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical list Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The logical values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to retrieve internal info. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          valueList=valueList, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                       lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_LOGICAL, litemCount, lattnestflag, & @\
          valueList, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclList(mthis, name, valueList, & @\
        defaultvalueList, inputList, convention, purpose, & @\
        attPackInstanceName, attnestflag, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      logical, dimension(:), intent(out) :: valueList @\
      logical, dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: inputList(:) @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical list Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The logical values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to retrieve internal info. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          valueList=valueList, inputList=inputList, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_LOGICAL, litemCount, lattnestflag, valueList, & @\
            localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_LOGICAL, litemCount, valueList, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclList @\

!------------------------------------------------------------------------------

#define AttGetCharacterBMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetChar" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharAP(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character (len = *), intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len = *), intent(in), optional :: defaultvalue @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The character value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The character default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent @\
      integer, dimension(1) :: lens @\
      integer :: count @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          value=value, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      lens(1) = len(value) @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                       lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_CHARACTER, count, lattnestflag, & @\
          lens, value, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
            msg="Attribute not found and default value not given", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = localrc @\
 @\
      end subroutine mclass##AttGetCharAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetChar" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetChar(mthis, name, value, defaultvalue, & @\
        convention, purpose, attPackInstanceName, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(out) :: value @\
      character (len = *), intent(in), optional :: defaultvalue @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The character value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The character default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      integer, dimension(1) :: lens @\
      integer :: count @\
      !! TODO: this needs to be dynamically sized !!! @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! Call into routine to retrieve internal class info @\
      ! return directly from here if info is found @\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_AttributeGetInfo(mthis, name=modName, & @\
          value=value, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (present(rc)) rc = ESMF_SUCCESS @\
        return @\
      endif @\
 @\
      lens(1) = len(value) @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_CHARACTER, count, lattnestflag, lens, value, & @\
            localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
            count, lens, value, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
            msg="Attribute not found and default value not given", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = localrc @\
 @\
      end subroutine mclass##AttGetChar @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCharList" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character list Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharListAP(mthis, name, attpack, valueList, & @\
        keywordEnforcer, defaultvalueList, attnestflag, & @\
        itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character (len=*), dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len=*), dimension(:), intent(in), optional :: defaultvalueList @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The character list values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The character list default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the character items to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      valueString = "" @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      do  i=1,litemCount @\
        lens(i) = len(valueList) @\
      enddo @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_CHARACTER, litemCount, lattnestflag, & @\
          lens, valueString, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        j = 1 @\
        do  i=1,litemCount @\
          valueList(i) = valueString(j:(j+lens(i)-1)) @\
          j = j + lens(i) @\
        enddo @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCharListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCharList" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharList(mthis, name, valueList, & @\
        defaultvalueList, convention, purpose, attPackInstanceName, & @\
        attnestflag, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len=*), dimension(:), intent(out) :: valueList @\
      character (len=*), dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The character list values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The character list default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the character items to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      valueString = "" @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      do  i=1,litemCount @\
        lens(i) = len(valueList) @\
      enddo @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_CHARACTER, litemCount, lattnestflag, & @\
            lens, valueString, localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
            litemCount, lens, valueString, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        j = 1 @\
        do  i=1,litemCount @\
          valueList(i) = valueString(j:(j+lens(i)-1)) @\
          j = j + lens(i) @\
        enddo @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCharList @\

!------------------------------------------------------------------------------

#define AttGetMacro(mtype, mtypekind, mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetAP##mtypekind(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      mtype(ESMF_KIND_##mtypekind), intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      mtype(ESMF_KIND_##mtypekind), intent(in), optional :: defaultvalue @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The real value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The real default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent @\
      integer :: count @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_##mtypekind, count, lattnestflag, value, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      endif @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAP##mtypekind @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet##mtypekind(mthis, name, value, & @\
        defaultvalue, convention, purpose, attPackInstanceName, & @\
        attnestflag, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), intent(out) :: value @\
      mtype(ESMF_KIND_##mtypekind), intent(in), optional :: defaultvalue @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The real value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The real default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      integer :: count @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_##mtypekind, count, lattnestflag, value, localrc) @\
        endif @\
      else @\
       @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_##mtypekind, count, value, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet##mtypekind @\
!------------------------------------------------------------------------------

#define AttGet1DMacro(mtype, mtypekind, mclass, mthis, mthisfield) \
@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet1DAP##mtypekind(mthis, name, attpack, & @\
        valueList, keywordEnforcer, defaultvalueList, attnestflag, & @\
        itemCount, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in), optional :: defaultvalueList @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The list of real values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The list of real default values of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the Attribute value to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemcount = size(valueList) @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_##mtypekind, litemCount, lattnestflag, & @\
          valueList, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet1DAP##mtypekind @\
!------------------------------------------------------------------------------@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGet1D##mtypekind(mthis, name, valueList, & @\
        defaultvalueList, convention, purpose, attPackInstanceName, & @\
        attnestflag, itemCount, isPresent, rc) @\
 @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(out) :: valueList @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount    @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns an Attribute from the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The list of real values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The list of real default values of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the Attribute value to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemcount = size(valueList) @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_##mtypekind, litemcount, lattnestflag, & @\
            valueList, localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
           ESMF_TYPEKIND_##mtypekind, litemCount, valueList, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGet1D##mtypekind @\

!------------------------------------------------------------------------------

#define AttGetLogicalMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclAP(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      logical, intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      logical, intent(in), optional :: defaultvalue @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical Attribute from the {\tt array}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The logical value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, localvalue @\
      integer :: count @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
@\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
 @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_LOGICAL, count, lattnestflag, localvalue, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        value = localvalue   @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgcl(mthis, name, value, defaultvalue, & @\
        convention, purpose, attPackInstanceName, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, intent(out) :: value @\
      logical, intent(in), optional :: defaultvalue @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical Attribute from the {\tt array}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The logical value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, isAttpack, localvalue @\
      integer :: count @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
 @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_LOGICAL, count, lattnestflag, localvalue, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          value = localvalue   @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_LOGICAL, count, localvalue, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          value = localvalue @\
        endif @\
      endif @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgcl @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical list Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclListAP(mthis, name, attpack, valueList, & @\
        keywordEnforcer, defaultvalueList, attnestflag, & @\
        itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      logical, dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      logical, dimension(:), intent(in), optional :: defaultvalueList @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical list Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The logical values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_LOGICAL, litemCount, lattnestflag, valueList, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a logical list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetLgclList(mthis, name, valueList, & @\
        defaultvalueList, convention, purpose, attPackInstanceName, & @\
        attnestflag, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len=*), intent(in) :: name @\
      logical, dimension(:), intent(out) :: valueList @\
      logical, dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount    @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a logical list Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The logical values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The logical default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The number of values in the Attribute. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount, i @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetValue(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_LOGICAL, litemCount, lattnestflag, valueList, & @\
            localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetValue(mthisfield, name, & @\
            ESMF_TYPEKIND_LOGICAL, litemCount, valueList, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetLgclList @\

!------------------------------------------------------------------------------

#define AttGetCharacterMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetChar" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharAP(mthis, name, attpack, value, & @\
        keywordEnforcer, defaultvalue, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character (len = *), intent(out) :: value @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len = *), intent(in), optional :: defaultvalue @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [value] @\
!           The character value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The character default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent @\
      integer, dimension(1) :: lens @\
      integer :: count @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      lens(1) = len(value) @\
      count = 1 @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_CHARACTER, count, lattnestflag, lens, value, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = localrc @\
 @\
      end subroutine mclass##AttGetCharAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetChar" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetChar(mthis, name, value, defaultvalue, & @\
        convention, purpose, attPackInstanceName, attnestflag, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(out) :: value @\
      character (len = *), intent(in), optional :: defaultvalue @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [value] @\
!           The character value of the named Attribute. @\
!     \item [{[defaultvalue]}] @\
!           The character default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      integer, dimension(1) :: lens @\
      integer :: count @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      lens(1) = len(value) @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_CHARACTER, count, lattnestflag, & @\
            lens, value, localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
            count, lens, value, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalue)) then @\
          value = defaultvalue @\
        else @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default value not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = localrc @\
 @\
      end subroutine mclass##AttGetChar @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCharList" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute list from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharListAP(mthis, name, attpack, valueList, & @\
        keywordEnforcer, defaultvalueList, attnestflag, & @\
        itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character (len=*), dimension(:), intent(out) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len=*), dimension(:), intent(in), optional :: defaultvalueList @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [valueList] @\
!           The character list values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The character list default value of the named Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the character items to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      valueString = "" @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      do  i=1,litemCount @\
        lens(i) = len(valueList) @\
      enddo @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                     lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
          ESMF_TYPEKIND_CHARACTER, litemCount, lattnestflag, & @\
          lens, valueString, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        j = 1 @\
        do  i=1,litemCount @\
          valueList(i) = valueString(j:(j+lens(i)-1)) @\
          j = j + lens(i) @\
        enddo @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCharListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCharList" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a character Attribute list @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetCharList(mthis, name, valueList, & @\
        defaultvalueList, convention, purpose, attPackInstanceName, & @\
        attnestflag, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len=*), dimension(:), intent(out) :: valueList @\
      character (len=*), dimension(:), intent(in), optional :: defaultvalueList @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns a character Attribute from the object. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to retrieve. @\
!     \item [valueList] @\
!           The character list values of the named Attribute. @\
!     \item [{[defaultvalueList]}] @\
!           The character list default value of the named Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[itemCount]}] @\
!           The itemCount of the character items to retrieve @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      valueString = "" @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      litemCount = size(valueList) @\
 @\
      do  i=1,litemCount @\
        lens(i) = len(valueList) @\
      enddo @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetCharList(mthisfield, name, attpack, & @\
            ESMF_TYPEKIND_CHARACTER, litemCount, lattnestflag, & @\
            lens, valueString, localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
            litemCount, lens, valueString, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .ne. ESMF_TRUE) then @\
        if(present(defaultvalueList)) then @\
          if(size(valueList) .lt. size(defaultvalueList)) then @\
            do i=1,size(valueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(valueList) @\
            endif @\
          else @\
            do i=1,size(defaultvalueList) @\
              valueList(i) = defaultvalueList(i) @\
            enddo @\
            if(present(itemCount)) then @\
              itemCount = size(defaultvalueList) @\
            endif @\
          endif @\
        else @\
          ! must set itemCount to 0 in this case because it will not have been @\
          ! modified from the original size of the given valueList @\
          if(present(itemCount)) then @\
            itemCount = 0 @\
          endif @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
               msg="Attribute not found and default values not given", & @\
               ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
 @\
      else @\
 @\
        j = 1 @\
        do  i=1,litemCount @\
          valueList(i) = valueString(j:(j+lens(i)-1)) @\
          j = j + lens(i) @\
        enddo @\
 @\
        if(present(itemCount)) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, localTk, & @\
            litemCount, localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
          itemCount = litemCount @\
        endif @\
 @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCharList @\

!------------------------------------------------------------------------------

#define GetCountMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCount" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query the number of Attributes @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet()  @\
      subroutine mclass##AttGetCount(mthis, count, keywordEnforcer, & @\
                                     convention, purpose, attPackInstanceName, & @\
                                     attcountflag, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis @\
      integer, intent(out) :: count @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttGetCountFlag), intent(in), optional :: attcountflag @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Returns the number of Attributes associated with the given Attribute @\
!     package in the argument {\tt count}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [count] @\
!           The number of Attributes associated with this object. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attcountflag]}] @\
!           Flag to determine which Attribute count to return. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when counting Attributes, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      type(ESMF_AttGetCountFlag) :: lattcountflag @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      type(ESMF_Logical) :: isAttpack @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize  @\
      isAttpack = ESMF_FALSE @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attcountflag)) then @\
        lattcountflag = attcountflag @\
      else @\
        lattcountflag = ESMF_ATTGETCOUNT_ATTRIBUTE @\
      endif @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
          call mclass##AttGetAttPack(mthis, & @\
                                  convention, purpose, & @\
                                  attPackInstanceName=attPackInstanceName, & @\
                                  attpack=attpack, attnestflag=lattnestflag, & @\
                                  rc=localrc) @\
          if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
            ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
          call c_ESMC_AttributeGetCountAttPack(attpack, count, & @\
                                               lattcountflag, lattnestflag, & @\
                                               localrc) @\
      else @\
          call c_ESMC_AttributeGetCount(mthisfield, count, lattcountflag, & @\
                                        localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCount @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetCountAttPack" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query the number of Attributes @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet()  @\
      subroutine mclass##AttGetCountAttPack(mthis, attpack, count,  & @\
                                              attcountflag, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      integer, intent(out) :: count @\
      type(ESMF_AttGetCountFlag), intent(in), optional :: attcountflag @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Returns the number of Attributes associated with the given object  @\
!     in the argument {\tt count}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [count] @\
!           The number of Attributes associated with this object. @\
!     \item [{[attcountflag]}] @\
!           Flag to determine which Attribute count to return. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when counting Attributes, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      type(ESMF_AttGetCountFlag) :: lattcountflag @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize  @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attcountflag)) then @\
        lattcountflag = attcountflag @\
      else @\
        lattcountflag = ESMF_ATTGETCOUNT_ATTRIBUTE @\
      endif @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      call c_ESMC_AttributeGetCountAttPack(attpack, count, lattcountflag, & @\
                                           lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetCountAttPack @\

!------------------------------------------------------------------------------

#define GetNameNumberMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetInfoByNam" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query Attributes by name from an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetInfoByNamAP(mthis, name, attpack, & @\
        keywordEnforcer, attnestflag, typekind, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character(len=*), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind @\
      integer, intent(out), optional :: itemCount    @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Returns information associated with the named Attribute,  @\
!     including {\tt typekind} and {\tt itemCount}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to query. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[typekind]}] @\
!           The typekind of the Attribute. @\
!     \item [{[itemCount]}] @\
!           The number of items in this Attribute.  For character types, @\
!           the length of the character string. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc              @\
      type(ESMF_Logical) :: lisPresent @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer :: litemCount @\
 @\
      ! Initialize  @\
      lisPresent = ESMF_FALSE @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
                       lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetInfoName(mthisfield, name, attpack, & @\
                                       lattnestflag, localTk, litemCount, & @\
                                       localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .eq. ESMF_TRUE) then @\
        if (present(typekind)) typekind = localTk @\
        if (present(itemCount)) itemCount = litemCount @\
      else @\
        if (present(typekind)) typekind = ESMF_NOKIND @\
        if (present(itemCount)) itemCount = 0 @\
        if (.not.present(isPresent).and..not.present(itemCount).and..not.present(typekind)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
             msg="Attribute not found and neither default values nor isPresent flag was given", & @\
             ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetInfoByNamAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetInfoByNam" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query Attributes by name @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetInfoByNam(mthis, name, keywordEnforcer, & @\
                             convention, purpose, attPackInstanceName, & @\
                             attnestflag, typekind, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character(len=*), intent(in) :: name @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind @\
      integer, intent(out), optional :: itemCount    @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Returns information associated with the named Attribute,  @\
!     including {\tt typekind} and {\tt itemCount}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to query. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[typekind]}] @\
!           The typekind of the Attribute. @\
!     \item [{[itemCount]}] @\
!           The number of items in this Attribute.  For character types, @\
!           the length of the character string. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc              @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer :: litemCount @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize  @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresent(mthisfield, name, attpack, & @\
          lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetInfoName(mthisfield, name, attpack, & @\
                                         lattnestflag, localTk, litemCount, & @\
                                         localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresent(mthisfield, name, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetInfoName(mthisfield, name, & @\
            localTk, litemCount, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .eq. ESMF_TRUE) then @\
        if (present(typekind)) typekind = localTk @\
        if (present(itemCount)) itemCount = litemCount @\
      else @\
        if (present(typekind)) typekind = ESMF_NOKIND @\
        if (present(itemCount)) itemCount = 0 @\
        if (.not.present(isPresent).and..not.present(itemCount).and..not.present(typekind)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
             msg="Attribute not found and neither default values nor isPresent flag was given", & @\
             ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetInfoByNam @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetInfoByNumAP" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query Attributes by index number @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetInfoByNumAP(mthis, attributeIndex, attpack, & @\
        name, attnestflag, typekind, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      integer, intent(in) :: attributeIndex @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character(len=*), intent(out) :: name @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns information associated with the indexed Attribute,  @\
!      including {\tt name}, {\tt typekind} and {\tt itemCount}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [attributeIndex] @\
!           The index number of the Attribute to query. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [name] @\
!           Returns the name of the Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[typekind]}] @\
!           Returns the typekind of the Attribute. @\
!     \item [{[itemCount]}] @\
!           Returns the number of items in this Attribute.  For character @\
!           types, this is the length of the character string. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      type(ESMF_Logical) :: lisPresent @\
      character(len=len(name)) :: localName @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer :: litemCount @\
 @\
      ! Initialize  @\
      lisPresent = ESMF_FALSE @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      call c_ESMC_AttPackIsPresentIndex(mthisfield, attributeIndex, attpack, & @\
                                        lisPresent, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      if (lisPresent == ESMF_TRUE) then @\
        call c_ESMC_AttPackGetInfoNum(mthisfield, attributeIndex, attpack, & @\
                                      localName, lattnestflag, localTk, & @\
                                      litemCount, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      end if @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .eq. ESMF_TRUE) then @\
        if (present(typekind)) typekind = localTk @\
        if (present(itemCount)) itemCount = litemCount @\
        name = localName @\
      else @\
        if (present(typekind)) typekind = ESMF_NOKIND @\
        if (present(itemCount)) itemCount = 0 @\
        name = "" @\
        if (.not.present(isPresent).and..not.present(itemCount).and..not.present(typekind)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
             msg="Attribute not found and neither default values nor isPresent flag was given", & @\
             ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetInfoByNumAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetInfoByNum" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Query Attributes by index number @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetInfoByNum(mthis, attributeIndex, name, & @\
        convention, purpose, attPackInstanceName, & @\
        attnestflag, typekind, itemCount, isPresent, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      integer, intent(in) :: attributeIndex @\
      character(len=*), intent(out) :: name @\
      character (len=*), intent(in), optional :: convention @\
      character (len=*), intent(in), optional :: purpose @\
      character (len=*), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      type(ESMF_TypeKind_Flag), intent(out), optional :: typekind @\
      integer, intent(out), optional :: itemCount @\
      logical, intent(out), optional :: isPresent @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!      Returns information associated with the indexed Attribute,  @\
!      including {\tt name}, {\tt typekind} and {\tt itemCount}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [attributeIndex] @\
!           The index number of the Attribute to query. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [name] @\
!           Returns the name of the Attribute. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[typekind]}] @\
!           Returns the typekind of the Attribute. @\
!     \item [{[itemCount]}] @\
!           Returns the number of items in this Attribute.  For character @\
!           types, this is the length of the character string. @\
!     \item [{[isPresent]}] @\
!           A logical flag to tell if this Attribute is present or not @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      type(ESMF_Logical) :: lisPresent, isAttpack @\
      character(len=len(name)) :: localName @\
      type(ESMF_TypeKind_Flag) :: localTk @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      integer :: litemCount @\
      type(ESMF_AttPack) :: attpack @\
 @\
      ! Initialize  @\
      lisPresent = ESMF_FALSE @\
      isAttpack = ESMF_FALSE @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        isAttpack = ESMF_TRUE @\
      endif @\
 @\
      if (isAttpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpack, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackIsPresentIndex(mthisfield, attributeIndex, & @\
                                          attpack, lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttPackGetInfoNum(mthisfield, attributeIndex, attpack, & @\
                                        localName, lattnestflag, localTk, & @\
                                        litemCount, localrc) @\
        end if @\
      else @\
        call c_ESMC_AttributeIsPresentIndex(mthisfield, attributeIndex, & @\
                                            lisPresent, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        if (lisPresent == ESMF_TRUE) then @\
          call c_ESMC_AttributeGetInfoNum(mthisfield, attributeIndex, & @\
                                          localName, localTk, & @\
                                          litemCount, localrc) @\
        endif @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(isPresent)) then @\
        isPresent = lisPresent @\
      endif @\
 @\
      if(lisPresent .eq. ESMF_TRUE) then @\
        if (present(typekind)) typekind = localTk @\
        if (present(itemCount)) itemCount = litemCount @\
        name = localName @\
      else @\
        if (present(typekind)) typekind = ESMF_NOKIND @\
        if (present(itemCount)) itemCount = 0 @\
        name = "" @\
        if (.not.present(isPresent).and..not.present(itemCount).and..not.present(typekind)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ATTR_NOTSET, & @\
             msg="Attribute not found and neither default values nor isPresent flag was given", & @\
             ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
      endif @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetInfoByNum @\

!------------------------------------------------------------------------------

#define AttGetAPinstNamesMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetAPinstNamesAP" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a list of AttPack instance names using an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetAPinstNamesAP(mthis, attpack, & @\
        attPackInstanceNameList, attPackInstanceNameCount, & @\
        keywordEnforcer, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      character (len = *), dimension(:), intent(out) :: attPackInstanceNameList @\
      integer, intent(out) :: attPackInstanceNameCount @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Get the Attribute package instance names of the specified @\
!     ESMF\_AttPack.  Also get the number of such names. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [attpack] @\
!      An Attribute package handle containing identifying information. @\
!     \item [attPackInstanceNameList] @\
!      The name(s) of the Attribute package instances of the given @\
!      convention and purpose. @\
!     \item [attPackInstanceNameCount] @\
!      The number of Attribute package instance names. @\
!     \item [{[attnestflag]}] @\
!      A flag to determine whether to descend the @\
!      Attribute hierarchy when searching for this Attribute package, @\
!      the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!      in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, APinstNameSize @\
      integer, dimension(size(attPackInstanceNameList)) :: APinstNameLens @\
      character(len=(size(attPackInstanceNameList)*len(attPackInstanceNameList))) :: APinstNameString @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      ! pack widths of NameList elements @\
      APinstNameSize = size(attPackInstanceNameList) @\
      do  i=1,APinstNameSize @\
        APinstNameLens(i) = len(attPackInstanceNameList(i)) @\
      enddo @\
 @\
      call c_ESMC_AttPackGetAPinstNames(mthisfield, attpack, & @\
        APinstNameString, APinstNameLens, APinstNameSize, & @\
        attPackInstanceNameCount, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! unpack returned attpack instance names @\
      j = 1 @\
      do  i=1,attPackInstanceNameCount @\
        attPackInstanceNameList(i) = & @\
                       APinstNameString(j:(j+APinstNameLens(i)-1)) @\
        j = j + APinstNameLens(i) @\
      enddo @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAPinstNamesAP @\
 @\
!--------------------------------------------------------------------------- @\
 @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttGetAPinstNames" @\
!BOPI @\
! !IROUTINE: ESMF_AttributeGet - Retrieve a list of AttPack instance names @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeGet() @\
      subroutine mclass##AttGetAPinstNames(mthis, convention, purpose, & @\
        attPackInstanceNameList, attPackInstanceNameCount, & @\
        attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis @\
      character (len = *), intent(in) :: convention @\
      character (len = *), intent(in) :: purpose @\
      character (len = *), dimension(:), intent(out) :: attPackInstanceNameList @\
      integer, intent(out) :: attPackInstanceNameCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Get the Attribute package instance names of the specified convention @\
!     and purpose.  Also get the number of such names. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An ESMF object. @\
!     \item [convention] @\
!      The convention of the Attribute package instances. @\
!     \item [purpose] @\
!      The purpose of the Attribute package instances. @\
!     \item [attPackInstanceNameList] @\
!      The name(s) of the Attribute package instances of the given @\
!      convention and purpose. @\
!     \item [attPackInstanceNameCount] @\
!      The number of Attribute package instance names. @\
!     \item [{[attnestflag]}] @\
!      A flag to determine whether to descend the @\
!      Attribute hierarchy when searching for this Attribute package, @\
!      the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!      in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, APinstNameSize @\
      integer, dimension(size(attPackInstanceNameList)) :: APinstNameLens @\
      character(len=(size(attPackInstanceNameList)*len(attPackInstanceNameList))) :: APinstNameString @\
      type(ESMF_AttPack) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      ! pack widths of NameList elements @\
      APinstNameSize = size(attPackInstanceNameList) @\
      do  i=1,APinstNameSize @\
        APinstNameLens(i) = len(attPackInstanceNameList(i)) @\
      enddo @\
 @\
      call mclass##AttGetAttPack(mthis, & @\
                              convention, purpose, & @\
                              attpack=attpack, attnestflag=lattnestflag, & @\
                              rc=localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      call c_ESMC_AttPackGetAPinstNames(mthisfield, attpack, & @\
        APinstNameString, APinstNameLens, APinstNameSize, & @\
        attPackInstanceNameCount, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
         ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! unpack returned attpack instance names @\
      j = 1 @\
      do  i=1,attPackInstanceNameCount @\
        attPackInstanceNameList(i) = & @\
                       APinstNameString(j:(j+APinstNameLens(i)-1)) @\
        j = j + APinstNameLens(i) @\
      enddo @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttGetAPinstNames @\

!-----------------------------------------------------------------------------

#define AttLinkMacro(mclass1, mclass2, mclass2short, mthis1, mthis2, mthisfield1, mthisfield2) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttLink" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeLink - Link one Attribute hierarchy to another @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeLink() @\
      subroutine mclass1##AttLink##mclass2short(mthis1, mthis2, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass1), intent(inout) :: mthis1 @\
      type(mclass2), intent(in)  :: mthis2 @\
      integer, intent(out), optional  :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attaches two Attribute hierarchies @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt mclass1} object. @\
!     \item [mthis2] @\
!      An {\tt mclass2} object. @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc                           ! Error status @\
      type(ESMF_Logical) :: linkChange @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass1##GetInit,mthis1,rc) @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass2##GetInit,mthis2,rc) @\
 @\
      linkChange = ESMF_TRUE @\
      call c_ESMC_AttributeLink(mthisfield1, mthisfield2, linkChange, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass1##AttLink##mclass2short @\

!-----------------------------------------------------------------------------

#define AttLinkCompMacro(mclass1, mclass2, mclass2short, mthis1, mthis2, mthisfield1, mthisfield2) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttLink" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeLink - Link one Attribute hierarchy to another @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeLink() @\
      subroutine mclass1##AttLink##mclass2short(mthis1, mthis2, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass1), intent(inout) :: mthis1 @\
      type(mclass2), intent(in)  :: mthis2 @\
      integer, intent(out), optional  :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attaches two Attribute hierarchies @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt mclass1} object. @\
!     \item [mthis2] @\
!      An {\tt mclass2} object. @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc                           ! Error status @\
      type(ESMF_Logical) :: linkChange @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass1##GetInit,mthis1,rc) @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass2##GetInit,mthis2,rc) @\
 @\
      linkChange = ESMF_FALSE @\
      call c_ESMC_AttributeLink(mthisfield1, mthisfield2, linkChange, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass1##AttLink##mclass2short @\

!-----------------------------------------------------------------------------

#define AttLinkStateMacro(mclass, mclassshort, mthis1, mthis2, mthisfield1, mthisfield2, mthisfield3, mobj) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_StateAttLink" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeLink - Link one Attribute hierarchy to another @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeLink() @\
      subroutine ESMF_StateAttLink##mclassshort(mthis1, mthis2, rc) @\
! @\
! !ARGUMENTS: @\
      type(ESMF_State), intent(inout) :: mthis1 @\
      type(mclass), intent(in)  :: mthis2 @\
      integer, intent(out), optional  :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attaches two Attribute hierarchies @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt ESMF\_State} object. @\
!     \item [mthis2] @\
!      An {\tt mclass} object. @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc                           ! Error status @\
      type(ESMF_Logical) :: lvalue1, lvalue2 @\
      character (len=*), parameter :: lobject = #mobj @\
      character (len=*), parameter :: lname1 = 'import' @\
      character (len=*), parameter :: lname2 = 'export' @\
      type(ESMF_Logical) :: linkChange @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(ESMF_StateGetInit,mthis1,rc) @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis2,rc) @\
 @\
      linkChange = ESMF_TRUE @\
      call c_ESMC_AttributeLink(mthisfield1, mthisfield2, linkChange, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      ! set the import and export Attributes on any Field connected to this State @\
      lvalue1 = .true. @\
      lvalue2 = .false. @\
      if (mthis1%mthisfield3 == ESMF_STATEINTENT_IMPORT) then @\
        call c_ESMC_AttributeSetObjsInTree(mthisfield1, lobject, lname1, & @\
          ESMF_TYPEKIND_LOGICAL, 1, lvalue1, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttributeSetObjsInTree(mthisfield1, lobject, lname2, & @\
          ESMF_TYPEKIND_LOGICAL, 1, lvalue2, localrc) @\
      else if (mthis1%mthisfield3 == ESMF_STATEINTENT_EXPORT) then @\
        call c_ESMC_AttributeSetObjsInTree(mthisfield1, lobject, lname1, & @\
          ESMF_TYPEKIND_LOGICAL, 1, lvalue2, localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttributeSetObjsInTree(mthisfield1, lobject, lname2, & @\
          ESMF_TYPEKIND_LOGICAL, 1, lvalue1, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine ESMF_StateAttLink##mclassshort @\

!-----------------------------------------------------------------------------

#define AttLinkRemoveMacro(mclass1, mclass2, mclass2short, mthis1, mthis2, mthisfield1, mthisfield2) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttLinkRemove" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink one Attribute hierarchy from another @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeLinkRemove() @\
      subroutine mclass1##AttLinkRm##mclass2short(mthis1, mthis2, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass1), intent(inout) :: mthis1 @\
      type(mclass2), intent(in)  :: mthis2 @\
      integer, intent(out), optional  :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Unattaches two Attribute hierarchies @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt mclass1} object. @\
!     \item [mthis2] @\
!      An {\tt mclass2} object. @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc                           ! Error status @\
      type(ESMF_Logical) :: linkChange @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass1##GetInit,mthis1,rc) @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass2##GetInit,mthis2,rc) @\
 @\
      linkChange = ESMF_TRUE @\
      call c_ESMC_AttributeLinkRemove(mthisfield1, mthisfield2, linkChange, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass1##AttLinkRm##mclass2short @\

!-----------------------------------------------------------------------------

#define AttLinkRemoveCompMacro(mclass1, mclass2, mclass2short, mthis1, mthis2, mthisfield1, mthisfield2) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttLinkRemove" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeLinkRemove - Unlink one Attribute hierarchy from another @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeLinkRemove() @\
      subroutine mclass1##AttLinkRm##mclass2short(mthis1, mthis2, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass1), intent(inout) :: mthis1 @\
      type(mclass2), intent(in)  :: mthis2 @\
      integer, intent(out), optional  :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Unattaches two Attribute hierarchies @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis1] @\
!      An {\tt mclass1} object. @\
!     \item [mthis2] @\
!      An {\tt mclass2} object. @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc                           ! Error status @\
      type(ESMF_Logical) :: linkChange @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass1##GetInit,mthis1,rc) @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass2##GetInit,mthis2,rc) @\
 @\
      linkChange = ESMF_FALSE @\
      call c_ESMC_AttributeLinkRemove(mthisfield1, mthisfield2, linkChange, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass1##AttLinkRm##mclass2short @\

!-----------------------------------------------------------------------------

#define AttReadMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttRead" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeRead - Read an Attribute package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeRead() @\
      subroutine mclass##AttRead(mthis, fileName, schemaFileName, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len=*),   intent(in), optional :: fileName @\
      character (len=*),   intent(in), optional :: schemaFileName @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Read the Attribute package for the {\tt mthis}. @\
!     The Attribute package defines the associated Attributes. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An {\tt mclass} object. @\
!     \item [{[fileName]}] @\
!      The file name to read from. @\
!     \item [{[schemaFileName]}] @\
!      The name of the XSD file to validate fileName. @\
!     \item [{[rc]}]  @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      ! initialize fileName length to zero for non-existent name @\
      integer :: fileNameLen, schemaFileNameLen, localrc @\
 @\
      fileNameLen = 0 @\
      schemaFileNameLen = 0 @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
      localrc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      ! get length of given fileNames for C++ validation @\
      if (present(fileName)) then @\
        fileNameLen = len_trim(fileName) @\
      end if @\
 @\
      if (present(schemaFileName)) then @\
        schemaFileNameLen = len_trim(schemaFileName) @\
      end if @\
 @\
      ! invoke C to C++ entry point @\
      call c_ESMC_AttributeRead(mthisfield, fileNameLen, fileName, & @\
                                schemaFileNameLen, schemaFileName, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttRead @\

!------------------------------------------------------------------------------

#define AttRemoveMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttRemove" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeRemove  - Remove an Attribute or Attribute Package using an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeRemove() @\
      subroutine mclass##AttRemoveAP(mthis, keywordEnforcer, name, & @\
        attpack, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len = *), intent(in), optional :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
! @\
! !DESCRIPTION: @\
!     Removes an Attribute on the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [{[name]}] @\
!           The name of the Attribute to destroy. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      if (present(name)) then @\
        call c_ESMC_AttPackRemoveAttribute(mthisfield, name, attpack, & @\
                                           lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttPackRemove(mthisfield, attpack, localrc) @\
        ESMF_INIT_SET_DELETED(attpack) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttRemoveAP @\
!------------------------------------------------------------------------------@\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttRemove" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeRemove  - Remove an Attribute or Attribute Package @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeRemove() @\
      subroutine mclass##AttRemove(mthis, name, convention, purpose, & @\
                                   attPackInstanceName, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in), optional :: name @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
! @\
! !DESCRIPTION: @\
!     Removes an Attribute on the object. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [{[name]}] @\
!           The name of the Attribute to destroy. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when searching for this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: attpack @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
      type(ESMF_AttPack) :: attpackobj @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE .and. .not.present(name)) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackRemove(mthisfield, attpackobj, lattnestflag, localrc) @\
        ESMF_INIT_SET_DELETED(attpackobj) @\
      else if (attpack == ESMF_TRUE .and. present(name)) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackRemoveAttribute(mthisfield, name, attpackobj, & @\
                                           lattnestflag, localrc) @\
      else if (present(name)) then @\
        call c_ESMC_AttributeRemove(mthisfield, name, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttRemove @\

!------------------------------------------------------------------------------

#define AttSetDoc() \
!BOPI @\
!EOPI @\

#define AttSetMacro(mtype, mtypekind, mclass, mthis, mthisfield) \
 @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set an Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetAP##mtypekind(mthis, name, value, attpack, & @\
        keywordEnforcer, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), intent(in) :: value @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach an Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The integer value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      count = 1 @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      call c_ESMC_AttPackSetValue(mthisfield, name, & @\
        ESMF_TYPEKIND_##mtypekind, count, value, & @\
        attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetAP##mtypekind @\
 @\
!------------------------------------------------------------------------------ @\
 @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSet" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSet##mtypekind(mthis, name, value, convention, & @\
        purpose, attPackInstanceName, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), intent(in) :: value @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach an Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The integer value of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc  @\
      type(ESMF_Logical) :: attpack @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      count = 1 @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_##mtypekind, count, value, & @\
          attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_##mtypekind, count, value, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSet##mtypekind @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set an Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSet1DAP##mtypekind(mthis, name, & @\
        valueList, attpack, keywordEnforcer, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in) :: valueList @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach an Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt valueList}. @\
!     The number of integer items in the {\tt valueList} is @\
!     given by {\tt itemCount}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [valueList] @\
!           The integer values of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[itemCount]}] @\
!           The number of integers in the {\tt valueList}. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc, litemCount @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
@\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      call c_ESMC_AttPackSetValue(mthisfield, name, & @\
        ESMF_TYPEKIND_##mtypekind, litemCount, valueList, & @\
        attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSet1DAP##mtypekind @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSet1D" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set an Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSet1D##mtypekind(mthis, name, valueList, & @\
        convention, purpose, attPackInstanceName, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      mtype(ESMF_KIND_##mtypekind), dimension(:), intent(in) :: valueList @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      integer, intent(in), optional :: itemCount    @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach an Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt valueList}. @\
!     The number of integer items in the {\tt valueList} is @\
!     given by {\tt itemCount}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [valueList] @\
!           The integer values of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[itemCount]}] @\
!           The number of integers in the {\tt valueList}. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
@\
      integer :: localrc, litemCount @\
      type(ESMF_Logical) :: attpack @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
@\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_##mtypekind, litemCount, valueList, & @\
          attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_##mtypekind, litemCount, valueList, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSet1D##mtypekind @\

!------------------------------------------------------------------------------

#define AttSetLogicalMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a logical Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetLgclAP(mthis, name, value, attpack, & @\
        keywordEnforcer, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, intent(in) :: value @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a logical Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The logical true/false value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: localvalue @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      count = 1 @\
 @\
      localvalue = value @\
      call c_ESMC_AttPackSetValue(mthisfield, name, & @\
        ESMF_TYPEKIND_LOGICAL, count, localvalue, & @\
        attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetLgclAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetLgcl" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a logical Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetLgcl(mthis, name, value, convention, & @\
        purpose, attPackInstanceName, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, intent(in) :: value @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a logical Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The logical true/false value of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented, @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      type(ESMF_Logical) :: localvalue @\
      type(ESMF_Logical) :: attpack @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
       !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
     count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      localvalue = value @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_LOGICAL, count, localvalue, & @\
          attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_LOGICAL, count, localvalue, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetLgcl @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a logical list Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetLgclListAP(mthis, name, valueList, attpack, & @\
        keywordEnforcer, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, dimension(:), intent(in) :: valueList @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a logical list Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt valueList}. @\
!     The number of logical items in the {\tt valueList} is @\
!     given by {\tt itemCount}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The logical true/false values of the Attribute. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[itemCount]}] @\
!           The number of logicals in the {\tt valueList}. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
@\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      call c_ESMC_AttPackSetValue(mthisfield, name, & @\
        ESMF_TYPEKIND_LOGICAL, litemCount, valueList, & @\
        attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetLgclListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetLgclList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a logical list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetLgclList(mthis, name, valueList, & @\
        convention, purpose, attPackInstanceName, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      logical, dimension(:), intent(in) :: valueList @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      integer, intent(in), optional :: itemCount    @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a logical list Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt valueList}. @\
!     The number of logical items in the {\tt valueList} is @\
!     given by {\tt itemCount}. @\
!  @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The logical true/false values of the Attribute. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance.  (Not implemented yet) @\
!     \item [{[itemCount]}] @\
!           The number of logicals in the {\tt valueList}. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, litemCount @\
      type(ESMF_Logical) :: attpack @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
@\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_LOGICAL, litemCount, valueList, & @\
          attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetValue(mthisfield, name, & @\
          ESMF_TYPEKIND_LOGICAL, litemCount, valueList, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetLgclList @\

!------------------------------------------------------------------------------

#define AttSetCharacterMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetChar" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharAP(mthis, name, value, attpack, & @\
        keywordEnforcer, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(in) :: value @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      integer, dimension(1) :: lens @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
@\
      lens(1) = len_trim(value) @\
      count = 1 @\
 @\
      call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
        count, value, lens, attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetChar" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetChar(mthis, name, value, convention, & @\
        purpose, attPackInstanceName, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis   @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(in) :: value @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc @\
      integer, dimension(1) :: lens @\
      type(ESMF_Logical) :: attpack @\
      integer :: count @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      lens(1) = len_trim(value) @\
      count = 1 @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          count, value, lens, attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          count, value, lens, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetChar @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetCharList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character list Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharListAP(mthis, name, valueList, attpack, & @\
        keywordEnforcer, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character(len=*), intent(in) :: name @\
      character (len = *), dimension(:), intent(in) :: valueList @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      j = 1 @\
      do  i=1,litemCount @\
        lens(i) = len_trim(valueList(i)) @\
        valueString(j:(j+lens(i)-1)) = valueList(i) @\
        j = j + lens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
        litemCount, valueString, lens, attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetCharList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharList(mthis, name, valueList, & @\
        convention, purpose, attPackInstanceName, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character(len=*), intent(in) :: name @\
      character (len = *), dimension(:), intent(in) :: valueList @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      type(ESMF_Logical) :: attpack @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      j = 1 @\
      do  i=1,litemCount @\
        lens(i) = len_trim(valueList(i)) @\
        valueString(j:(j+lens(i)-1)) = valueList(i) @\
        j = j + lens(i) @\
      enddo @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharList @\

!------------------------------------------------------------------------------

#define AttSetCharacterBMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetChar" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharAP(mthis, name, value, attpack, & @\
        keywordEnforcer, inputList, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(in) :: value @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      character (len = *), intent(in), optional :: inputList(:) @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to set internal info. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, memstat @\
      integer, allocatable :: lens(:) @\
      integer :: litemCount, i, j @\
      character (len=ESMF_MAXSTR) :: modName @\
      character, allocatable :: valueString(:) @\
      integer :: lens_size, valuestring_size, tag_size @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
      tag_size = 6 ! ':Input:' is 7 characters long @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! allocate arrays @\
      if (present (inputList)) then @\
        valuestring_size = len(value) @\
        lens_size = 1 @\
        do i=1,size(inputList) @\
          if (len_trim(inputList(i)) > 0) then @\
            valuestring_size = valuestring_size + len_trim(inputList(i)) + tag_size @\
            lens_size = lens_size + 1 @\
          endif @\
        enddo @\
        ! set the size of the new valueList @\
        litemCount =  lens_size @\
      else @\
        valuestring_size = len(value) @\
        ! this is required for bluefire, it does not function well with 0 size allocations @\
        if (len(value) == 0) then @\
          valuestring_size = 1 @\
        endif @\
        lens_size = 1 @\
        ! set the size of the new valueList @\
        litemCount = 1 @\
      end if @\
 @\
      allocate (lens (lens_size), stat = memstat) @\
      lens = 0 @\
      if (ESMF_LogFoundAllocError(memstat, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT,  rcToReturn=rc)) return @\
      allocate (valueString (valuestring_size), stat = memstat) @\
      valueString = "" @\
      if (ESMF_LogFoundAllocError(memstat, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT,  rcToReturn=rc)) then @\
        deallocate(lens) @\
        return @\
      endif @\
 @\
      ! this is required for bluefire, this block of code will not work with empty @\
      ! attribute values, but that case should not happen with inputLists.. @\
      if (len_trim(value) > 0) then @\
        ! also for internal Attributes, must append inputList to the Attribute value @\
        lens(1) = len_trim(value) @\
        valueString(1:lens(1)) = ESMF_String2Array(trim(value)) @\
      endif @\
      if (present(inputList)) then @\
        j = lens(1) + 1 @\
        do i=2,litemCount @\
          if (len_trim(inputList(i-1)) > 0) then @\
            ! put inputList values into valueString @\
            lens(i) = len_trim(inputList(i-1))+tag_size @\
            valueString(j:(j+tag_size-1)) = ESMF_String2Array("Input:") @\
            j = j + tag_size @\
            valueString(j:(j+lens(i)-tag_size-1)) =  & @\
              ESMF_String2Array(trim(inputList(i-1))) @\
            j = j + lens(i) @\
          endif @\
        enddo @\
      endif @\
 @\
      call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
        litemCount, valueString, lens, attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundAllocError(memstat, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT,  rcToReturn=rc)) return @\
 @\
      ! deallocate @\
      deallocate(lens) @\
      deallocate(valueString) @\
 @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharAP @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetChar" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetChar(mthis, name, value, inputList, & @\
        convention, purpose, attPackInstanceName, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character (len = *), intent(in) :: name @\
      character (len = *), intent(in) :: value @\
      character (len = *), intent(in), optional :: inputList(:) @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [{[inputList]}] @\
!           A list of the input parameters required to set internal info. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, memstat @\
      integer, allocatable :: lens(:) @\
      type(ESMF_Logical) :: attpack @\
      integer :: litemCount, i, j @\
      character (len=ESMF_MAXSTR) :: modName @\
      character, allocatable :: valueString(:) @\
      integer :: lens_size, valuestring_size, tag_size @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      tag_size = 6 ! ':Input:' is 7 characters long @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      ! allocate arrays @\
      if (present (inputList)) then @\
        valuestring_size = len(value) @\
        lens_size = 1 @\
        do i=1,size(inputList) @\
          if (len_trim(inputList(i)) > 0) then @\
            valuestring_size = valuestring_size + len_trim(inputList(i)) + tag_size @\
            lens_size = lens_size + 1 @\
          endif @\
        enddo @\
        ! set the size of the new valueList @\
        litemCount =  lens_size @\
      else @\
        valuestring_size = len(value) @\
        ! this is required for bluefire, it does not function well with 0 size allocations @\
        if (len(value) == 0) then @\
          valuestring_size = 1 @\
        endif @\
        lens_size = 1 @\
        ! set the size of the new valueList @\
        litemCount = 1 @\
      end if @\
 @\
      allocate (lens (lens_size), stat = memstat) @\
      lens = 0 @\
      if (ESMF_LogFoundAllocError(memstat, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT,  rcToReturn=rc)) return @\
      allocate (valueString (valuestring_size), stat = memstat) @\
      valueString = "" @\
      if (ESMF_LogFoundAllocError(memstat, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT,  rcToReturn=rc)) then @\
        deallocate(lens) @\
        return @\
      endif @\
 @\
      ! this is required for bluefire, this block of code will not work with empty @\
      ! attribute values, but that case should not happen with inputLists.. @\
      if (len_trim(value) > 0) then @\
        ! also for internal Attributes, must append inputList to the Attribute value @\
        lens(1) = len_trim(value) @\
        valueString(1:lens(1)) = ESMF_String2Array(trim(value)) @\
      endif @\
      if (present(inputList)) then @\
        j = lens(1) + 1 @\
        do i=2,litemCount @\
          if (len_trim(inputList(i-1)) > 0) then @\
            ! put inputList values into valueString @\
            lens(i) = len_trim(inputList(i-1))+tag_size @\
            valueString(j:(j+tag_size-1)) = ESMF_String2Array("Input:") @\
            j = j + tag_size @\
            valueString(j:(j+lens(i)-tag_size-1)) =  & @\
              ESMF_String2Array(trim(inputList(i-1))) @\
            j = j + lens(i) @\
          endif @\
        enddo @\
      endif @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          deallocate(lens) @\
          deallocate(valueString) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, localrc) @\
      endif @\
 @\
      ! deallocate @\
      deallocate(lens) @\
      deallocate(valueString) @\
 @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetChar @\
 @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetCharList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character list Attribute in an ESMF_AttPack @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharListAP(mthis, name, valueList, attpack, & @\
        keywordEnforcer, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character(len=*), intent(in) :: name @\
      character (len = *), dimension(:), intent(in) :: valueList @\
      type(ESMF_AttPack), intent(inout) :: attpack @\
type(ESMF_KeywordEnforcer), optional:: keywordEnforcer ! must use keywords below @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [attpack] @\
!           An Attribute package handle containing identifying information. @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
      ESMF_INIT_CHECK_DEEP(ESMF_AttributeGetInit, attpack, rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      j = 1 @\
      do  i=1,litemCount @\
        lens(i) = len_trim(valueList(i)) @\
        valueString(j:(j+lens(i)-1)) = valueList(i) @\
        j = j + lens(i) @\
      enddo @\
 @\
      call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
        litemCount, valueString, lens, attpack, lattnestflag, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharListAP @\
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttSetCharList" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeSet - Set a character list Attribute @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeSet() @\
      subroutine mclass##AttSetCharList(mthis, name, valueList, & @\
        convention, purpose, attPackInstanceName, itemCount, attnestflag, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      character(len=*), intent(in) :: name @\
      character (len = *), dimension(:), intent(in) :: valueList @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      character (len = *), intent(in), optional :: attPackInstanceName @\
      integer, intent(in), optional :: itemCount @\
      type(ESMF_AttNest_Flag), intent(in), optional :: attnestflag @\
      integer, intent(out), optional :: rc @\
 @\
! @\
! !DESCRIPTION: @\
!     Attach a character Attribute to the object. @\
!     The Attribute has a {\tt name} and a {\tt value}. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!           An ESMF object. @\
!     \item [name] @\
!           The name of the Attribute to add. @\
!     \item [value] @\
!           The character value of the Attribute to add. @\
!     \item [{[convention]}] @\
!           The convention of the Attribute package. @\
!     \item [{[purpose]}] @\
!           The purpose of the Attribute package. @\
!     \item [{[attPackInstanceName]}] @\
!           The name of an Attribute package instance, specifying which one @\
!           of multiple Attribute package instances of the same convention @\
!           and purpose, within a nest.  If not specified, defaults to the @\
!           first instance. (Not implemented yet) @\
!     \item [{[attnestflag]}] @\
!           A flag to determine whether to descend the @\
!           Attribute hierarchy when setting this Attribute, @\
!           the default is {\tt ESMF\_ATTNEST\_ON}. This flag is documented @\
!           in section \ref{const:attnest}. @\
!     \item [{[rc]}]  @\
!           Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, i, j, litemCount @\
      integer, dimension(size(valueList)) :: lens @\
      character(len=(size(valueList)*len(valueList))) :: valueString @\
      type(ESMF_Logical) :: attpack @\
      character (len=ESMF_MAXSTR) :: modName @\
      type(ESMF_AttPack) :: attpackobj @\
      type(ESMF_AttNest_Flag) :: lattnestflag @\
 @\
      ! Initialize @\
      localrc = ESMF_RC_NOT_IMPL @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      if (present(attnestflag)) then @\
        lattnestflag = attnestflag @\
      else @\
        lattnestflag = ESMF_ATTNEST_ON @\
      endif @\
 @\
      !!!! TODO: this can go away once modName is dynamically sized !!! @\
      if (len(name) > ESMF_MAXSTR) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="len(name) cannot be larger than ESMF_MAXSTR for now", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
      ! If internal info is implied, bail out, cannot set Attribute starting with 'ESMF:'@\
      if (AttributeInternalInfo(name, modName)) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_NOT_VALID, & @\
          msg="Attribute names starting with 'ESMF:' are not allowed!", & @\
          ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      if (present(itemCount)) then @\
        if (itemCount > size(valueList)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="itemCount cannot be larger than size(valueList)", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        litemCount = itemCount @\
      else @\
        litemCount = size(valueList) @\
      end if @\
 @\
      if (litemCount .le. 0) then @\
        call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_BAD, & @\
                              msg="valueList is too small", & @\
                              ESMF_CONTEXT, rcToReturn=rc) @\
        return @\
      endif @\
 @\
      j = 1 @\
      do  i=1,litemCount @\
        lens(i) = len_trim(valueList(i)) @\
        valueString(j:(j+lens(i)-1)) = valueList(i) @\
        j = j + lens(i) @\
      enddo @\
 @\
      if (present(convention).or.present(purpose)) then @\
        if (present(convention).and..not.present(purpose).or. & @\
            present(purpose).and..not.present(convention)) then @\
          call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
            msg="both convention and purpose must be present or not", & @\
            ESMF_CONTEXT, rcToReturn=rc) @\
          return @\
        endif @\
        attpack = ESMF_TRUE @\
      endif @\
 @\
      if (attpack == ESMF_TRUE) then @\
        call mclass##AttGetAttPack(mthis, & @\
                                convention, purpose, attpack=attpackobj, & @\
                                attPackInstanceName=attPackInstanceName, & @\
                                attnestflag=lattnestflag, rc=localrc) @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
        call c_ESMC_AttPackSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, attpackobj, lattnestflag, localrc) @\
      else @\
        call c_ESMC_AttributeSetCharList(mthisfield, name, ESMF_TYPEKIND_CHARACTER, & @\
          litemCount, valueString, lens, localrc) @\
      endif @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttSetCharList @\

!-----------------------------------------------------------------------------

#define AttUpdateMacro(mclass, mthis, mthisfield) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttUpdate" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeUpdate - Update an Attribute hierarchy @\
! @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeUpdate() @\
      subroutine mclass##AttUpdate(mthis, vm, rootList, rc) @\
! @\
! !ARGUMENTS: @\
      type(mclass), intent(inout) :: mthis @\
      type(ESMF_VM), intent(in) :: vm @\
      integer, dimension(:), intent(in) :: rootList @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Update an Attribute hierarchy. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An {\tt mclass} object. @\
!     \item [vm] @\
!      The virtural machine over which this Attribute hierarchy  @\
!      should be updated. @\
!     \item [rootList] @\
!      The list of "root" PETs that are to be used to update. @\
!     \item [{[rc]}]  @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, count                           ! Error status @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      count = size(rootList) @\
      call c_ESMC_AttributeUpdate(mthisfield, vm, rootList, count, localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttUpdate @\

!-----------------------------------------------------------------------------

#define AttWriteMacro(mclass, mthis, mthisfield, mthisobj, mthistar) \
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_AttWrite" @\
 @\
!BOPI @\
! !IROUTINE: ESMF_AttributeWrite - Write an Attribute package to file @\
 @\
! !INTERFACE: @\
      ! Private name; call using ESMF_AttributeWrite() @\
      subroutine mclass##AttWrite(mthis, convention, purpose, attwriteflag, rc) @\
 @\
! !ARGUMENTS: @\
      type(mclass), intent(in) :: mthis   @\
      character (len = *), intent(in), optional :: convention @\
      character (len = *), intent(in), optional :: purpose @\
      type(ESMF_AttWriteFlag), intent(in), optional :: attwriteflag @\
      integer, intent(out), optional :: rc    @\
 @\
! @\
! !DESCRIPTION: @\
!     Write the Attribute package for the {\tt state}. @\
!     The Attribute package defines the convention, purpose, and object type  @\
!     of the associated Attributes. @\
! @\
! This call is collective across the current VM. @\
! @\
!     The arguments are: @\
!     \begin{description} @\
!     \item [mthis] @\
!      An {\tt mclass} object. @\
!     \item [convention] @\
!      The convention of the Attribute package. @\
!     \item [purpose] @\
!      The purpose of the Attribute package. @\
!     \item [attwriteflag] @\
!      Flag to determine the format for writing the Attributes. @\
!     \item [{[rc]}]  @\
!      Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!     \end{description} @\
! @\
! @\
!EOPI @\
 @\
      integer :: localrc, petCount, localPet @\
      character(len=*), parameter :: object=#mthisobj @\
      character(len=*), parameter :: ftarobj=#mthistar @\
      type(ESMF_AttWriteFlag) :: writeflag @\
      type(ESMF_Logical) :: attpack @\
      type(ESMF_VM) :: vm @\
 @\
      ! Initialize return code; assume failure until success is certain @\
      attpack = ESMF_FALSE @\
      if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
 @\
      ! check input variables @\
      ESMF_INIT_CHECK_DEEP(mclass##GetInit,mthis,rc) @\
 @\
      call ESMF_VMGetCurrent(vm, rc=localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
      call ESMF_VMGet(vm, petCount=petCount, localPet=localPet, rc=localrc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (localPet == 0) then @\
        if (present(convention).or.present(purpose)) then @\
          if (present(convention).and..not.present(purpose).or. & @\
              present(purpose).and..not.present(convention)) then @\
            call ESMF_LogSetError(rcToCheck=ESMF_RC_ARG_INCOMP, & @\
              msg="both convention and purpose must be present or not", & @\
              ESMF_CONTEXT, rcToReturn=rc) @\
            return @\
          endif @\
          attpack = ESMF_TRUE @\
        endif @\
 @\
        if (present(attwriteflag)) then @\
          writeflag = attwriteflag @\
        else @\
          writeflag = ESMF_ATTWRITE_TAB @\
        endif @\
 @\
        if (attpack == ESMF_TRUE) then @\
          if (writeflag%value .eq. ESMF_ATTWRITE_TAB%value) then @\
            call c_ESMC_AttributeWriteTab(mthisfield, convention, & @\
              purpose, object, ftarobj, localrc) @\
          else if (writeflag%value .eq. ESMF_ATTWRITE_XML%value) then @\
            call c_ESMC_AttributeWriteXML(mthisfield, convention, & @\
              purpose, object, ftarobj, localrc) @\
          endif @\
        endif @\
        if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
          ESMF_CONTEXT, rcToReturn=rc)) return @\
      endif @\
 @\
      call ESMF_VMBarrier(vm, rc=rc) @\
      if (ESMF_LogFoundError(localrc, ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rcToReturn=rc)) return @\
 @\
      if (present(rc)) rc = ESMF_SUCCESS @\
 @\
      end subroutine mclass##AttWrite @\

!-------------------------------------------------------------------------
!  CplComp
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_CplComp, comp, comp%compp%base)
AttGetAttPackMacroSL(ESMF_CplComp, comp, comp%compp%base)

AttAddPackStandardMacro(ESMF_CplComp, comp, comp%compp%base)
AttAddPackStandardNMacro(ESMF_CplComp, comp, comp%compp%base)
AttAddPackCustomMacro(ESMF_CplComp, comp, comp%compp%base)
AttAddPackCustomNMacro(ESMF_CplComp, comp, comp%compp%base)
AttAddPackCustomN1Macro(ESMF_CplComp, comp, comp%compp%base)
AttAddPackStandardMacroSL(ESMF_CplComp, comp, comp%compp%base)
!AttAddPackStandardNMacroSL(ESMF_CplComp, comp, comp%compp%base)
AttAddPackCustomMacroSL(ESMF_CplComp, comp, comp%compp%base)

AttCopyMacro(ESMF_CplComp, ESMF_CplComp, comp1, comp2, comp1%compp%base, comp2%compp%base)

TypeKind3DeclarationMacro(AttGet, ESMF_CplComp, comp, comp%compp%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_CplComp, comp, comp%compp%base)
AttGetLogicalMacro(ESMF_CplComp, comp, comp%compp%base)
AttGetCharacterMacro(ESMF_CplComp, comp, comp%compp%base)

GetCountMacro(ESMF_CplComp, comp, comp%compp%base)
GetNameNumberMacro(ESMF_CplComp, comp, comp%compp%base)

AttGetAPinstNamesMacro(ESMF_CplComp, comp, comp%compp%base)

AttLinkCompMacro(ESMF_CplComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_CplComp, ESMF_GridComp, GridComp, comp1, comp2,  & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_CplComp, ESMF_SciComp, SciComp, comp1, comp2,  & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_CplComp, ESMF_State, State, comp, state,  & @\
                comp%compp%base, state%statep%base)
AttLinkCompMacro(ESMF_CplComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)
AttLinkRemoveCompMacro(ESMF_CplComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_CplComp, ESMF_GridComp, GridComp, comp1, comp2,  & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_CplComp, ESMF_SciComp, SciComp, comp1, comp2,  & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_CplComp, ESMF_State, State, comp, state,  & @\
                comp%compp%base, state%statep%base)
AttLinkRemoveCompMacro(ESMF_CplComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)

AttReadMacro(ESMF_CplComp, comp, comp%compp%base)

AttRemoveMacro(ESMF_CplComp, comp, comp%compp%base)

TypeKind3DeclarationMacro(AttSet, ESMF_CplComp, comp, comp%compp%base)
AttSetLogicalMacro(ESMF_CplComp, comp, comp%compp%base)
AttSetCharacterMacro(ESMF_CplComp, comp, comp%compp%base)

AttUpdateMacro(ESMF_CplComp, comp, comp%compp%base)
AttWriteMacro(ESMF_CplComp, comp, comp%compp%base, comp, field)

!-------------------------------------------------------------------------
!  GridComp
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_GridComp, comp, comp%compp%base)
AttGetAttPackMacroSL(ESMF_GridComp, comp, comp%compp%base)

AttAddPackStandardMacro(ESMF_GridComp, comp, comp%compp%base)
AttAddPackStandardNMacro(ESMF_GridComp, comp, comp%compp%base)
AttAddPackCustomMacro(ESMF_GridComp, comp, comp%compp%base)
AttAddPackCustomNMacro(ESMF_GridComp, comp, comp%compp%base)
AttAddPackCustomN1Macro(ESMF_GridComp, comp, comp%compp%base)
AttAddPackStandardMacroSL(ESMF_GridComp, comp, comp%compp%base)
!AttAddPackStandardNMacroSL(ESMF_GridComp, comp, comp%compp%base)
AttAddPackCustomMacroSL(ESMF_GridComp, comp, comp%compp%base)

AttCopyMacro(ESMF_GridComp, ESMF_GridComp, comp1, comp2, comp1%compp%base, comp2%compp%base)

AttRemoveMacro(ESMF_GridComp, comp, comp%compp%base)

TypeKind3DeclarationMacro(AttGet, ESMF_GridComp, comp, comp%compp%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_GridComp, comp, comp%compp%base)
AttGetLogicalMacro(ESMF_GridComp, comp, comp%compp%base)
AttGetCharacterMacro(ESMF_GridComp, comp, comp%compp%base)

GetCountMacro(ESMF_GridComp, comp, comp%compp%base)
GetNameNumberMacro(ESMF_GridComp, comp, comp%compp%base)

AttGetAPinstNamesMacro(ESMF_GridComp, comp, comp%compp%base)

AttLinkCompMacro(ESMF_GridComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_GridComp, ESMF_GridComp, GridComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_GridComp, ESMF_SciComp, SciComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_GridComp, ESMF_State, State, comp, state, & @\
                comp%compp%base, state%statep%base)
AttLinkCompMacro(ESMF_GridComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)
AttLinkRemoveCompMacro(ESMF_GridComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_GridComp, ESMF_GridComp, GridComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_GridComp, ESMF_SciComp, SciComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_GridComp, ESMF_State, State, comp, state, & @\
                comp%compp%base, state%statep%base)
AttLinkRemoveCompMacro(ESMF_GridComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)

AttReadMacro(ESMF_GridComp, comp, comp%compp%base)

TypeKind3DeclarationMacro(AttSet, ESMF_GridComp, comp, comp%compp%base)
AttSetLogicalMacro(ESMF_GridComp, comp, comp%compp%base)
AttSetCharacterMacro(ESMF_GridComp, comp, comp%compp%base)

AttUpdateMacro(ESMF_GridComp, comp, comp%compp%base)
AttWriteMacro(ESMF_GridComp, comp, comp%compp%base, comp, field)

!-------------------------------------------------------------------------
!  SciComp
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_SciComp, comp, comp%compp%base)
AttGetAttPackMacroSL(ESMF_SciComp, comp, comp%compp%base)

AttAddPackStandardMacro(ESMF_SciComp, comp, comp%compp%base)
AttAddPackStandardNMacro(ESMF_SciComp, comp, comp%compp%base)
AttAddPackCustomMacro(ESMF_SciComp, comp, comp%compp%base)
AttAddPackCustomNMacro(ESMF_SciComp, comp, comp%compp%base)
AttAddPackCustomN1Macro(ESMF_SciComp, comp, comp%compp%base)
AttAddPackStandardMacroSL(ESMF_SciComp, comp, comp%compp%base)
!AttAddPackStandardNMacroSL(ESMF_SciComp, comp, comp%compp%base)
AttAddPackCustomMacroSL(ESMF_SciComp, comp, comp%compp%base)

AttCopyMacro(ESMF_SciComp, ESMF_SciComp, comp1, comp2, comp1%compp%base, comp2%compp%base)

AttRemoveMacro(ESMF_SciComp, comp, comp%compp%base)

TypeKind3DeclarationMacro(AttGet, ESMF_SciComp, comp, comp%compp%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_SciComp, comp, comp%compp%base)
AttGetLogicalMacro(ESMF_SciComp, comp, comp%compp%base)
AttGetCharacterMacro(ESMF_SciComp, comp, comp%compp%base)

GetCountMacro(ESMF_SciComp, comp, comp%compp%base)
GetNameNumberMacro(ESMF_SciComp, comp, comp%compp%base)

AttGetAPinstNamesMacro(ESMF_SciComp, comp, comp%compp%base)

AttLinkCompMacro(ESMF_SciComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_SciComp, ESMF_GridComp, GridComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_SciComp, ESMF_SciComp, SciComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkCompMacro(ESMF_SciComp, ESMF_State, State, comp, state, & @\
                comp%compp%base, state%statep%base)
AttLinkCompMacro(ESMF_SciComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)
AttLinkRemoveCompMacro(ESMF_SciComp, ESMF_CplComp, CplComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_SciComp, ESMF_GridComp, GridComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_SciComp, ESMF_SciComp, SciComp, comp1, comp2, & @\
                comp1%compp%base, comp2%compp%base)
AttLinkRemoveCompMacro(ESMF_SciComp, ESMF_State, State, comp, state, & @\
                comp%compp%base, state%statep%base)
AttLinkRemoveCompMacro(ESMF_SciComp, ESMF_Grid, Grid, comp, grid,  & @\
                comp%compp%base, grid)

AttReadMacro(ESMF_SciComp, comp, comp%compp%base)

TypeKind3DeclarationMacro(AttSet, ESMF_SciComp, comp, comp%compp%base)
AttSetLogicalMacro(ESMF_SciComp, comp, comp%compp%base)
AttSetCharacterMacro(ESMF_SciComp, comp, comp%compp%base)

AttUpdateMacro(ESMF_SciComp, comp, comp%compp%base)
AttWriteMacro(ESMF_SciComp, comp, comp%compp%base, comp, field)

!-------------------------------------------------------------------------
!  STATE
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_State, state, state%statep%base)
AttGetAttPackMacroSL(ESMF_State, state, state%statep%base)

AttAddPackStandardMacro(ESMF_State, state, state%statep%base)
AttAddPackCustomMacro(ESMF_State, state, state%statep%base)
AttAddPackCustomNMacro(ESMF_State, state, state%statep%base)
AttAddPackCustomN1Macro(ESMF_State, state, state%statep%base)
AttAddPackStandardMacroSL(ESMF_State, state, state%statep%base)
AttAddPackCustomMacroSL(ESMF_State, state, state%statep%base)

AttCopyMacro(ESMF_State, ESMF_State, state1, state2, state1%statep%base, state2%statep%base)

TypeKind3DeclarationMacro(AttGet, ESMF_State, state, state%statep%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_State, state, state%statep%base)
AttGetLogicalMacro(ESMF_State, state, state%statep%base)
AttGetCharacterMacro(ESMF_State, state, state%statep%base)

GetCountMacro(ESMF_State, state, state%statep%base)
GetNameNumberMacro(ESMF_State, state, state%statep%base)

AttLinkStateMacro(ESMF_Array, Array, state, array, state%statep%base, & @\
                          array, statep%st, array)
AttLinkStateMacro(ESMF_ArrayBundle, ArrayBundle, state, arraybundle, state%statep%base, & @\
                          arraybundle, statep%st, array)
AttLinkStateMacro(ESMF_Field, Field, state, field, state%statep%base, & @\
                          field%ftypep%base, statep%st, field)
AttLinkStateMacro(ESMF_FieldBundle, FieldBundle, state, fieldbundle, state%statep%base, & @\
                          fieldbundle%this%base, statep%st, field)
AttLinkStateMacro(ESMF_State, State, state1, state2, state1%statep%base, & @\
                          state2%statep%base, statep%st, field)
AttLinkRemoveMacro(ESMF_State, ESMF_Array, Array, state, array, & @\
                state%statep%base, array)
AttLinkRemoveMacro(ESMF_State, ESMF_ArrayBundle, ArrayBundle, state, arraybundle, & @\
                state%statep%base, arraybundle)
AttLinkRemoveMacro(ESMF_State, ESMF_Field, Field, state, field, & @\
                state%statep%base, field%ftypep%base)
AttLinkRemoveMacro(ESMF_State, ESMF_FieldBundle, FieldBundle, state, fieldbundle, & @\
                state%statep%base, fieldbundle%this%base)
AttLinkRemoveMacro(ESMF_State, ESMF_State, State, state1, state2, & @\
                state1%statep%base, state2%statep%base)

AttRemoveMacro(ESMF_State, state, state%statep%base)

AttReadMacro(ESMF_State, state, state%statep%base)

TypeKind3DeclarationMacro(AttSet, ESMF_State, state, state%statep%base)
AttSetLogicalMacro(ESMF_State, state, state%statep%base)
AttSetCharacterMacro(ESMF_State, state, state%statep%base)

AttUpdateMacro(ESMF_State, state, state%statep%base)
AttWriteMacro(ESMF_State, state, state%statep%base, state, field)

!-------------------------------------------------------------------------
!  FIELDBUNDLE
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttGetAttPackMacroSL(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

AttAddPackCustomMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttAddPackCustomNMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttAddPackCustomN1Macro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttAddPackCustomMacroSL(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

TypeKind3DeclarationMacro(AttGet, ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttGetLogicalMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttGetCharacterMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

GetCountMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
GetNameNumberMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

AttLinkMacro(ESMF_FieldBundle, ESMF_Field, Field, fieldbundle, field, & @\
                fieldbundle%this%base, field%ftypep%base)
AttLinkMacro(ESMF_FieldBundle, ESMF_Grid, Grid, fieldbundle, grid, & @\
                fieldbundle%this%base, grid)
AttLinkRemoveMacro(ESMF_FieldBundle, ESMF_Field, Field, fieldbundle, field, & @\
                fieldbundle%this%base, field%ftypep%base)
AttLinkRemoveMacro(ESMF_FieldBundle, ESMF_Grid, Grid, fieldbundle, grid, & @\
                fieldbundle%this%base, grid)

AttReadMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

AttRemoveMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

TypeKind3DeclarationMacro(AttSet, ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttSetLogicalMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttSetCharacterMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)

AttUpdateMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base)
AttWriteMacro(ESMF_FieldBundle, fieldbundle, fieldbundle%this%base, fieldbundle, field)

!-------------------------------------------------------------------------
!  FIELD
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_Field, field, field%ftypep%base)
AttGetAttPackMacroSL(ESMF_Field, field, field%ftypep%base)

AttAddPackStandardMacro(ESMF_Field, field, field%ftypep%base)
AttAddPackCustomMacro(ESMF_Field, field, field%ftypep%base)
AttAddPackCustomNMacro(ESMF_Field, field, field%ftypep%base)
AttAddPackCustomN1Macro(ESMF_Field, field, field%ftypep%base)
AttAddPackStandardMacroSL(ESMF_Field, field, field%ftypep%base)
AttAddPackCustomMacroSL(ESMF_Field, field, field%ftypep%base)

TypeKind3DeclarationMacro(AttGet, ESMF_Field, field, field%ftypep%base)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_Field, field, field%ftypep%base)
AttGetLogicalMacro(ESMF_Field, field, field%ftypep%base)
AttGetCharacterMacro(ESMF_Field, field, field%ftypep%base)

GetCountMacro(ESMF_Field, field, field%ftypep%base)
GetNameNumberMacro(ESMF_Field, field, field%ftypep%base)

AttLinkMacro(ESMF_Field, ESMF_Grid, Grid, field, grid, & @\
                field%ftypep%base, grid)
AttLinkRemoveMacro(ESMF_Field, ESMF_Grid, Grid, field, grid, & @\
                field%ftypep%base, grid)

AttReadMacro(ESMF_Field, field, field%ftypep%base)

AttRemoveMacro(ESMF_Field, field, field%ftypep%base)

TypeKind3DeclarationMacro(AttSet, ESMF_Field, field, field%ftypep%base)
AttSetLogicalMacro(ESMF_Field, field, field%ftypep%base)
AttSetCharacterMacro(ESMF_Field, field, field%ftypep%base)

AttUpdateMacro(ESMF_Field, field, field%ftypep%base)
AttWriteMacro(ESMF_Field, field, field%ftypep%base, field, field)

!-------------------------------------------------------------------------
!  ARRAYBUNDLE
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttGetAttPackMacroSL(ESMF_ArrayBundle, arraybundle, arraybundle)

AttAddPackCustomMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttAddPackCustomNMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttAddPackCustomN1Macro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttAddPackCustomMacroSL(ESMF_ArrayBundle, arraybundle, arraybundle)

AttRemoveMacro(ESMF_ArrayBundle, arraybundle, arraybundle)

TypeKind3DeclarationMacro(AttGet, ESMF_ArrayBundle, arraybundle, arraybundle)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_ArrayBundle, arraybundle, arraybundle)
AttGetLogicalMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttGetCharacterMacro(ESMF_ArrayBundle, arraybundle, arraybundle)

GetCountMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
GetNameNumberMacro(ESMF_ArrayBundle, arraybundle, arraybundle)

AttLinkMacro(ESMF_ArrayBundle, ESMF_Array, Array, arraybundle, array, & @\
                arraybundle, array)
AttLinkRemoveMacro(ESMF_ArrayBundle, ESMF_Array, Array, arraybundle, array, & @\
                arraybundle, array)

TypeKind3DeclarationMacro(AttSet, ESMF_ArrayBundle, arraybundle, arraybundle)
AttSetLogicalMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttSetCharacterMacro(ESMF_ArrayBundle, arraybundle, arraybundle)

AttUpdateMacro(ESMF_ArrayBundle, arraybundle, arraybundle)
AttWriteMacro(ESMF_ArrayBundle, arraybundle, arraybundle, arraybundle, array)

!-------------------------------------------------------------------------
!  ARRAY
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_Array, array, array)
AttGetAttPackMacroSL(ESMF_Array, array, array)

AttAddPackCustomMacro(ESMF_Array, array, array)
AttAddPackCustomNMacro(ESMF_Array, array, array)
AttAddPackCustomN1Macro(ESMF_Array, array, array)
AttAddPackStandardMacro(ESMF_Array, array, array)
AttAddPackCustomMacroSL(ESMF_Array, array, array)
AttAddPackStandardMacroSL(ESMF_Array, array, array)

AttRemoveMacro(ESMF_Array, array, array)

TypeKind3DeclarationMacro(AttGet, ESMF_Array, array, array)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_Array, array, array)
AttGetLogicalMacro(ESMF_Array, array, array)
AttGetCharacterMacro(ESMF_Array, array, array)

GetCountMacro(ESMF_Array, array, array)
GetNameNumberMacro(ESMF_Array, array, array)

TypeKind3DeclarationMacro(AttSet, ESMF_Array, array, array)
AttSetLogicalMacro(ESMF_Array, array, array)
AttSetCharacterMacro(ESMF_Array, array, array)

AttUpdateMacro(ESMF_Array, array, array)
AttWriteMacro(ESMF_Array, array, array, array, array)

!-------------------------------------------------------------------------
!  GRID
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_Grid, grid, grid)
AttGetAttPackMacroSL(ESMF_Grid, grid, grid)

AttAddPackStandardMacro(ESMF_Grid, grid, grid)
AttAddPackCustomMacro(ESMF_Grid, grid, grid)
AttAddPackCustomNMacro(ESMF_Grid, grid, grid)
AttAddPackCustomN1Macro(ESMF_Grid, grid, grid)
AttAddPackStandardMacroSL(ESMF_Grid, grid, grid)
AttAddPackCustomMacroSL(ESMF_Grid, grid, grid)

^ifndef ESMF_NO_INTEGER_1_BYTE
funcname##Macro(integer, I1, ESMF_Grid, grid, grid)
^endif
^ifndef ESMF_NO_INTEGER_2_BYTE
funcname##Macro(integer, I2, ESMF_Grid, grid, grid)
^endif
AttGetBMacro(integer, I4, ESMF_Grid, grid, grid)
AttGet1DBMacro(integer, I4, ESMF_Grid, grid, grid)
AttGetMacro(integer, I8, ESMF_Grid, grid, grid)
AttGet1DMacro(integer, I8, ESMF_Grid, grid, grid)
AttGetMacro(real, R4, ESMF_Grid, grid, grid)
AttGet1DBMacro(real, R4, ESMF_Grid, grid, grid)
AttGetMacro(real, R8, ESMF_Grid, grid, grid)
AttGet1DBMacro(real, R8, ESMF_Grid, grid, grid)
AttGetLogicalBMacro(ESMF_Grid, grid, grid)
AttGetCharacterBMacro(ESMF_Grid, grid, grid)

GetCountMacro(ESMF_Grid, grid, grid)
GetNameNumberMacro(ESMF_Grid, grid, grid)

AttReadMacro(ESMF_Grid, grid, grid)

AttRemoveMacro(ESMF_Grid, grid, grid)

TypeKind3DeclarationMacro(AttSet, ESMF_Grid, grid, grid)
AttSetLogicalMacro(ESMF_Grid, grid, grid)
AttSetCharacterBMacro(ESMF_Grid, grid, grid)

AttWriteMacro(ESMF_Grid, grid, grid, grid, grid)

!-------------------------------------------------------------------------
!  DISTGRID
!-------------------------------------------------------------------------

AttGetAttPackMacro(ESMF_DistGrid, distgrid, distgrid)
AttGetAttPackMacroSL(ESMF_DistGrid, distgrid, distgrid)

AttAddPackCustomMacro(ESMF_DistGrid, distgrid, distgrid)
AttAddPackCustomNMacro(ESMF_DistGrid, distgrid, distgrid)
AttAddPackCustomN1Macro(ESMF_DistGrid, distgrid, distgrid)
AttAddPackCustomMacroSL(ESMF_DistGrid, distgrid, distgrid)

TypeKind3DeclarationMacro(AttGet, ESMF_DistGrid, distgrid, distgrid)
TypeKind3NoDocDeclarationMacro(AttGet1D, ESMF_DistGrid, distgrid, distgrid)
AttGetLogicalMacro(ESMF_DistGrid, distgrid, distgrid)
AttGetCharacterMacro(ESMF_DistGrid, distgrid, distgrid)

GetCountMacro(ESMF_DistGrid, distgrid, distgrid)
GetNameNumberMacro(ESMF_DistGrid, distgrid, distgrid)

AttRemoveMacro(ESMF_DistGrid, distgrid, distgrid)

TypeKind3DeclarationMacro(AttSet, ESMF_DistGrid, distgrid, distgrid)
AttSetLogicalMacro(ESMF_DistGrid, distgrid, distgrid)
AttSetCharacterMacro(ESMF_DistGrid, distgrid, distgrid)

AttWriteMacro(ESMF_DistGrid, distgrid, distgrid, distgrid, distgrid)

!------------------------------------------------------------------------------

end module ESMF_AttributeMod
